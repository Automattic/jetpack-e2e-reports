{
  "uid" : "7d2fa951129aa21c",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1626194845014,
    "stop" : 1626194981710,
    "duration" : 136696
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a MailChimp block&quot;,\n    async () =&gt; {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(&quot;Can connect to a MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Error",
  "statusTrace" : "ConnectionsPage is not available after 3rd attempt",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "ConnectionsPage is not available after 3rd attempt",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6bb9e17d69d2d332",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "6bb9e17d69d2d332.png",
      "type" : "image/png",
      "size" : 42063
    }, {
      "uid" : "2c5c895e9a163f35",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "2c5c895e9a163f35.png",
      "type" : "image/png",
      "size" : 15401
    }, {
      "uid" : "da249235ac1e0db",
      "name" : "1626194971618_Paid_blocks___MailChimp_Block.webm",
      "source" : "da249235ac1e0db.webm",
      "type" : "video/webm",
      "size" : 2167147
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 6,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "f8e1224fb4259a76",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/f8e1224fb4259a76",
        "status" : "passed",
        "time" : {
          "start" : 1626178421799,
          "stop" : 1626178444673,
          "duration" : 22874
        }
      }, {
        "uid" : "dbcda73c6201f1a7",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/dbcda73c6201f1a7",
        "status" : "passed",
        "time" : {
          "start" : 1626177461305,
          "stop" : 1626177478291,
          "duration" : 16986
        }
      }, {
        "uid" : "384bae2832124e59",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/384bae2832124e59",
        "status" : "passed",
        "time" : {
          "start" : 1625836535194,
          "stop" : 1625836551108,
          "duration" : 15914
        }
      }, {
        "uid" : "3276a367428c1d6a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/3276a367428c1d6a",
        "status" : "passed",
        "time" : {
          "start" : 1625833364207,
          "stop" : 1625833382601,
          "duration" : 18394
        }
      }, {
        "uid" : "6040f400d5153b92",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/6040f400d5153b92",
        "status" : "passed",
        "time" : {
          "start" : 1625826126154,
          "stop" : 1625826141052,
          "duration" : 14898
        }
      }, {
        "uid" : "b42d26fe6197f9e6",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20256/report/#testresult/b42d26fe6197f9e6",
        "status" : "passed",
        "time" : {
          "start" : 1625241456542,
          "stop" : 1625241474605,
          "duration" : 18063
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7d2fa951129aa21c.json",
  "parameterValues" : [ ]
}