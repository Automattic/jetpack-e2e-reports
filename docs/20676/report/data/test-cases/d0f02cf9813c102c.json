{
  "uid" : "d0f02cf9813c102c",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1631569259285,
    "stop" : 1631569259332,
    "duration" : 47
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a MailChimp block\", async () => {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\"Connect to MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a MailChimp block&quot;, async () =&gt; {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(&quot;Connect to MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.click: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"a[href*='my-plan'] span\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.click: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"a[href*='my-plan'] span\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5e8c7544dc4af1fe",
      "name" : "beforeAll - Paid blocks",
      "source" : "5e8c7544dc4af1fe.png",
      "type" : "image/png",
      "size" : 276706
    }, {
      "uid" : "31f53b4cdf9f288c",
      "name" : "1631569254708_beforeAll___Paid_blocks.webm",
      "source" : "31f53b4cdf9f288c.webm",
      "type" : "video/webm",
      "size" : 1228414
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "ec4ccefc13c0aaf",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20676/report/#testresult/ec4ccefc13c0aaf",
        "status" : "passed",
        "time" : {
          "start" : 1631565417574,
          "stop" : 1631565431876,
          "duration" : 14302
        }
      }, {
        "uid" : "2ad417db962a3e6",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20676/report/#testresult/2ad417db962a3e6",
        "status" : "passed",
        "time" : {
          "start" : 1628873758549,
          "stop" : 1628873772277,
          "duration" : 13728
        }
      }, {
        "uid" : "d9466ac414fe3941",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20676/report/#testresult/d9466ac414fe3941",
        "status" : "passed",
        "time" : {
          "start" : 1628806444948,
          "stop" : 1628806463311,
          "duration" : 18363
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d0f02cf9813c102c.json",
  "parameterValues" : [ ]
}