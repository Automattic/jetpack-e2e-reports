{
  "uid" : "2d5cbee0d18e40a8",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1625219039430,
    "stop" : 1625219055167,
    "duration" : 15737
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a MailChimp block&quot;,\n    async () =&gt; {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(&quot;Can connect to a MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 9,
        "unknown" : 0,
        "total" : 10
      },
      "items" : [ {
        "uid" : "b5d87dc1b7a32f6b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/b5d87dc1b7a32f6b",
        "status" : "passed",
        "time" : {
          "start" : 1625164252065,
          "stop" : 1625164265450,
          "duration" : 13385
        }
      }, {
        "uid" : "ab8a6b7bf7de4ae",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/ab8a6b7bf7de4ae",
        "status" : "passed",
        "time" : {
          "start" : 1625163398563,
          "stop" : 1625163411951,
          "duration" : 13388
        }
      }, {
        "uid" : "6664ea3594f0f3b7",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/6664ea3594f0f3b7",
        "status" : "passed",
        "time" : {
          "start" : 1625161488936,
          "stop" : 1625161505844,
          "duration" : 16908
        }
      }, {
        "uid" : "37e9ad7136a7ee37",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/37e9ad7136a7ee37",
        "status" : "passed",
        "time" : {
          "start" : 1625157715585,
          "stop" : 1625157737837,
          "duration" : 22252
        }
      }, {
        "uid" : "3e968ed272a2181e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/3e968ed272a2181e",
        "status" : "passed",
        "time" : {
          "start" : 1625156736604,
          "stop" : 1625156750744,
          "duration" : 14140
        }
      }, {
        "uid" : "a420aba2cd0c958f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/a420aba2cd0c958f",
        "status" : "passed",
        "time" : {
          "start" : 1625155047638,
          "stop" : 1625155061000,
          "duration" : 13362
        }
      }, {
        "uid" : "952acdb3a4eb0e2c",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/report/#testresult/952acdb3a4eb0e2c",
        "status" : "passed",
        "time" : {
          "start" : 1625154149326,
          "stop" : 1625154164358,
          "duration" : 15032
        }
      }, {
        "uid" : "7e9226e378f8ed6a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/#testresult/7e9226e378f8ed6a",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1625153433961,
          "stop" : 1625153434041,
          "duration" : 80
        }
      }, {
        "uid" : "65721853148113ab",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20231/#testresult/65721853148113ab",
        "status" : "passed",
        "time" : {
          "start" : 1625151659204,
          "stop" : 1625151672247,
          "duration" : 13043
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2d5cbee0d18e40a8.json",
  "parameterValues" : [ ]
}