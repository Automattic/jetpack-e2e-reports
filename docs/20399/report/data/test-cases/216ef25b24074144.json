{
  "uid" : "216ef25b24074144",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1628826936548,
    "stop" : 1628826995633,
    "duration" : 59085
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a MailChimp block\", async () => {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\"Connect to MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a MailChimp block&quot;, async () =&gt; {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(&quot;Connect to MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//span[contains(text(), 'e2etesting')]\" to be visible\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1628826929614,
        "stop" : 1628826936539,
        "duration" : 6925
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1628826995695,
        "stop" : 1628826998241,
        "duration" : 2546
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1628827004183,
        "stop" : 1628827006544,
        "duration" : 2361
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a MailChimp block\", async () => {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\"Connect to MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//span[contains(text(), 'e2etesting')]\" to be visible\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ {
      "name" : "Add a MailChimp block",
      "time" : {
        "start" : 1628826936608,
        "stop" : 1628826938347,
        "duration" : 1739
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Search for block: Mailchimp",
        "time" : {
          "start" : 1628826936609,
          "stop" : 1628826937798,
          "duration" : 1189
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Insert block with name: mailchimp",
        "time" : {
          "start" : 1628826937800,
          "stop" : 1628826938190,
          "duration" : 390
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Connect to MailChimp",
      "time" : {
        "start" : 1628826938350,
        "stop" : 1628826985493,
        "duration" : 47143
      },
      "status" : "failed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "12bd500606272ad7",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "12bd500606272ad7.png",
      "type" : "image/png",
      "size" : 42256
    }, {
      "uid" : "5ed3c9acc4ed383e",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "5ed3c9acc4ed383e.png",
      "type" : "image/png",
      "size" : 141731
    }, {
      "uid" : "20bd228f5f9bbb75",
      "name" : "1628826986367_Paid_blocks___MailChimp_Block.webm",
      "source" : "20bd228f5f9bbb75.webm",
      "type" : "video/webm",
      "size" : 1051558
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 7,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "ccb6b746b2bbaec4",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/ccb6b746b2bbaec4",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1628826091640,
          "stop" : 1628826154679,
          "duration" : 63039
        }
      }, {
        "uid" : "c0171b329f7a9b6e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/c0171b329f7a9b6e",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1628825267295,
          "stop" : 1628825327615,
          "duration" : 60320
        }
      }, {
        "uid" : "7b09f423b28121e6",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/7b09f423b28121e6",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1628808142868,
          "stop" : 1628808205094,
          "duration" : 62226
        }
      }, {
        "uid" : "e0e3cf856009d55e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/e0e3cf856009d55e",
        "status" : "passed",
        "time" : {
          "start" : 1628806185794,
          "stop" : 1628806199495,
          "duration" : 13701
        }
      }, {
        "uid" : "f005a753787be6ea",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/f005a753787be6ea",
        "status" : "passed",
        "time" : {
          "start" : 1628803869517,
          "stop" : 1628803882973,
          "duration" : 13456
        }
      }, {
        "uid" : "fa51b7e0d922cde7",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/fa51b7e0d922cde7",
        "status" : "passed",
        "time" : {
          "start" : 1628758670857,
          "stop" : 1628758682486,
          "duration" : 11629
        }
      }, {
        "uid" : "17a0e82b17bf6bc9",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/17a0e82b17bf6bc9",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1628120007935,
          "stop" : 1628120068938,
          "duration" : 61003
        }
      }, {
        "uid" : "6d468d953f8d7731",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/6d468d953f8d7731",
        "status" : "passed",
        "time" : {
          "start" : 1627604222900,
          "stop" : 1627604237391,
          "duration" : 14491
        }
      }, {
        "uid" : "d88e9682b6f76bd5",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/d88e9682b6f76bd5",
        "status" : "passed",
        "time" : {
          "start" : 1627548980704,
          "stop" : 1627549000585,
          "duration" : 19881
        }
      }, {
        "uid" : "40cc14c5a598e03b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/40cc14c5a598e03b",
        "status" : "passed",
        "time" : {
          "start" : 1627364665772,
          "stop" : 1627364690340,
          "duration" : 24568
        }
      }, {
        "uid" : "78c7d1c18277c9bb",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20399/report/#testresult/78c7d1c18277c9bb",
        "status" : "passed",
        "time" : {
          "start" : 1626689603031,
          "stop" : 1626689622947,
          "duration" : 19916
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "216ef25b24074144.json",
  "parameterValues" : [ ]
}