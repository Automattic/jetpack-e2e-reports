{
  "uid" : "f0e5399e0f091d0d",
  "name" : "Eventbrite block",
  "fullName" : "Eventbrite block",
  "historyId" : "0b4a15ebb314cfb213eb3e305bfce89d",
  "time" : {
    "start" : 1623706038513,
    "stop" : 1623706047346,
    "duration" : 8833
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const eventId = &quot;112691417062&quot;;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Eventbrite block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Eventbrite block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Eventbrite block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "48f23a03bbbafc26",
      "status" : "passed",
      "time" : {
        "start" : 1623704678102,
        "stop" : 1623704687228,
        "duration" : 9126
      }
    }, {
      "uid" : "d4aa3ad7983a1045",
      "status" : "passed",
      "time" : {
        "start" : 1623700955102,
        "stop" : 1623700963792,
        "duration" : 8690
      }
    }, {
      "uid" : "920f73b825689f15",
      "status" : "passed",
      "time" : {
        "start" : 1623446567210,
        "stop" : 1623446574817,
        "duration" : 7607
      }
    }, {
      "uid" : "3c04ede35de25684",
      "status" : "passed",
      "time" : {
        "start" : 1623435044654,
        "stop" : 1623435054250,
        "duration" : 9596
      }
    }, {
      "uid" : "18d267949fa232ea",
      "status" : "passed",
      "time" : {
        "start" : 1623433248713,
        "stop" : 1623433258731,
        "duration" : 10018
      }
    }, {
      "uid" : "5c9f8315cad33eed",
      "status" : "passed",
      "time" : {
        "start" : 1623365080446,
        "stop" : 1623365091327,
        "duration" : 10881
      }
    }, {
      "uid" : "b0a2c8954ead5e4b",
      "status" : "passed",
      "time" : {
        "start" : 1623363843342,
        "stop" : 1623363851685,
        "duration" : 8343
      }
    }, {
      "uid" : "a3a9b1826a5a1895",
      "status" : "passed",
      "time" : {
        "start" : 1623357382724,
        "stop" : 1623357393560,
        "duration" : 10836
      }
    }, {
      "uid" : "f19db2ebf51a0d31",
      "status" : "passed",
      "time" : {
        "start" : 1623356428998,
        "stop" : 1623356437445,
        "duration" : 8447
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "f0e5399e0f091d0d.json",
  "parameterValues" : [ ]
}