{
  "uid" : "c675f6491d25b853",
  "name" : "Can perform search with default settings",
  "fullName" : "Can perform search with default settings",
  "historyId" : "8a48effa07b2a0dc8118fcc35772e118",
  "time" : {
    "start" : 1627053095974,
    "stop" : 1627053131024,
    "duration" : 35050
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _testSetup.step)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _testSetup.step)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _testSetup.step)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _testSetup.step)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  await (0, _testSetup.step)(\n    &quot;Can open the overlay by entering a query&quot;,\n    async () =&gt; {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can show search controls in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can show search results in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can sort results by relevance by default&quot;,\n    async () =&gt; {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        &quot;&lt;mark&gt;Test1&lt;/mark&gt; Record 1&quot;\n      );\n    }\n  );\n  await (0, _testSetup.step)(&quot;Can edit query in search form&quot;, async () =&gt; {\n    await homepage.enterQueryToOverlay(&quot;test2&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 1&quot;\n    );\n  });\n  await (0, _testSetup.step)(&quot;Can change sort order&quot;, async () =&gt; {\n    await homepage.chooseSortingLink(&quot;newest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;newest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n    await homepage.chooseSortingLink(&quot;oldest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;oldest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n  });\n  await (0, _testSetup.step)(&quot;Can apply filters&quot;, async () =&gt; {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n  });\n  await (0, _testSetup.step)(\n    &quot;Can close overlay by clicking the cross&quot;,\n    async () =&gt; {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.fill: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"input.search-field\"\n  selector resolved to hidden <input type=\"search\" autocomplete=\"off\" inputmode=\"searâ€¦/>\nelementHandle.fill(\"test1\")\n  waiting for element to be visible, enabled and editable\n    element is not visible - waiting...\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _testSetup.step)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _testSetup.step)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _testSetup.step)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _testSetup.step)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.fill: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"input.search-field\"\n  selector resolved to hidden <input type=\"search\" autocomplete=\"off\" inputmode=\"searâ€¦/>\nelementHandle.fill(\"test1\")\n  waiting for element to be visible, enabled and editable\n    element is not visible - waiting...\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "63e14d92f7cb5a9e",
      "name" : "Search - Can perform search with default settings",
      "source" : "63e14d92f7cb5a9e.png",
      "type" : "image/png",
      "size" : 52783
    }, {
      "uid" : "1959238cfcd21683",
      "name" : "1627053126340_Search___Can_perform_search_with_default_settings.webm",
      "source" : "1959238cfcd21683.webm",
      "type" : "video/webm",
      "size" : 512239
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "search.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 13,
        "unknown" : 0,
        "total" : 20
      },
      "items" : [ {
        "uid" : "7c06f1beea9e62b5",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/7c06f1beea9e62b5",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626989186865,
          "stop" : 1626989221979,
          "duration" : 35114
        }
      }, {
        "uid" : "b6f05b01910698c3",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/b6f05b01910698c3",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626983180284,
          "stop" : 1626983214427,
          "duration" : 34143
        }
      }, {
        "uid" : "82ef71c9d7d62a42",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/82ef71c9d7d62a42",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626904015757,
          "stop" : 1626904050008,
          "duration" : 34251
        }
      }, {
        "uid" : "23ea52a25519cbec",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/23ea52a25519cbec",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626901228712,
          "stop" : 1626901228872,
          "duration" : 160
        }
      }, {
        "uid" : "963f6f0243fb4f07",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/963f6f0243fb4f07",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626899967300,
          "stop" : 1626900002501,
          "duration" : 35201
        }
      }, {
        "uid" : "457f16d3e50cdc84",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/457f16d3e50cdc84",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626897309622,
          "stop" : 1626897345326,
          "duration" : 35704
        }
      }, {
        "uid" : "496042091925d7d7",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/496042091925d7d7",
        "status" : "passed",
        "time" : {
          "start" : 1626801488940,
          "stop" : 1626801491317,
          "duration" : 2377
        }
      }, {
        "uid" : "fa85e6d4aa391d64",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/fa85e6d4aa391d64",
        "status" : "passed",
        "time" : {
          "start" : 1626730559918,
          "stop" : 1626730563110,
          "duration" : 3192
        }
      }, {
        "uid" : "483e02fc45c229fc",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/483e02fc45c229fc",
        "status" : "passed",
        "time" : {
          "start" : 1626728614899,
          "stop" : 1626728617248,
          "duration" : 2349
        }
      }, {
        "uid" : "a7b2b3c17fdef9a5",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/a7b2b3c17fdef9a5",
        "status" : "passed",
        "time" : {
          "start" : 1626727439844,
          "stop" : 1626727442462,
          "duration" : 2618
        }
      }, {
        "uid" : "88171cf565edde1b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/88171cf565edde1b",
        "status" : "passed",
        "time" : {
          "start" : 1626725632036,
          "stop" : 1626725634521,
          "duration" : 2485
        }
      }, {
        "uid" : "17ac7330c7fd7167",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/17ac7330c7fd7167",
        "status" : "passed",
        "time" : {
          "start" : 1626472639899,
          "stop" : 1626472643362,
          "duration" : 3463
        }
      }, {
        "uid" : "fd1085cf756fc5a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/fd1085cf756fc5a",
        "status" : "passed",
        "time" : {
          "start" : 1626380912459,
          "stop" : 1626380914863,
          "duration" : 2404
        }
      }, {
        "uid" : "aa9ef08a5e769072",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/aa9ef08a5e769072",
        "status" : "passed",
        "time" : {
          "start" : 1626378206687,
          "stop" : 1626378209779,
          "duration" : 3092
        }
      }, {
        "uid" : "214f0fcea1c04b4a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/214f0fcea1c04b4a",
        "status" : "passed",
        "time" : {
          "start" : 1626373016748,
          "stop" : 1626373019142,
          "duration" : 2394
        }
      }, {
        "uid" : "3a09cb5bb067807d",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/3a09cb5bb067807d",
        "status" : "passed",
        "time" : {
          "start" : 1625868711782,
          "stop" : 1625868714302,
          "duration" : 2520
        }
      }, {
        "uid" : "6fee632992f2d469",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/6fee632992f2d469",
        "status" : "passed",
        "time" : {
          "start" : 1625866596243,
          "stop" : 1625866599154,
          "duration" : 2911
        }
      }, {
        "uid" : "5b1ee7737100051f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/5b1ee7737100051f",
        "status" : "passed",
        "time" : {
          "start" : 1625769002747,
          "stop" : 1625769005173,
          "duration" : 2426
        }
      }, {
        "uid" : "5682d03eb4082fdf",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20303/report/#testresult/5682d03eb4082fdf",
        "status" : "passed",
        "time" : {
          "start" : 1625691018494,
          "stop" : 1625691020940,
          "duration" : 2446
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c675f6491d25b853.json",
  "parameterValues" : [ ]
}