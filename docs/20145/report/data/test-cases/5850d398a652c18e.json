{
  "uid" : "5850d398a652c18e",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1624424392003,
    "stop" : 1624424396656,
    "duration" : 4653
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Pinterest block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6bf1e090d1d0a315",
      "name" : "1624424386326_beforeAll___Free_blocks.webm",
      "source" : "6bf1e090d1d0a315.webm",
      "type" : "video/webm",
      "size" : 444678
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c5f59bf4e2929188",
      "name" : "1624424368112_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "c5f59bf4e2929188.webm",
      "type" : "video/webm",
      "size" : 347801
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d9e7c6a13c7c5a75",
      "name" : "1624424396568_Free_blocks___Pinterest_block.webm",
      "source" : "d9e7c6a13c7c5a75.webm",
      "type" : "video/webm",
      "size" : 378613
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5850d398a652c18e.json",
  "parameterValues" : [ ]
}