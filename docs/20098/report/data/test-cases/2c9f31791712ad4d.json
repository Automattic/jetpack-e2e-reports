{
  "uid" : "2c9f31791712ad4d",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1624463073503,
    "stop" : 1624463083462,
    "duration" : 9959
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Pinterest block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1ea1cd7ad3e3202b",
      "name" : "1624463064985_beforeAll___Free_blocks.webm",
      "source" : "1ea1cd7ad3e3202b.webm",
      "type" : "video/webm",
      "size" : 551361
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "75b1e30c2830724d",
      "name" : "1624463044405_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "75b1e30c2830724d.webm",
      "type" : "video/webm",
      "size" : 595290
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b06b0dab785aeab5",
      "name" : "1624463083265_Free_blocks___Pinterest_block.webm",
      "source" : "b06b0dab785aeab5.webm",
      "type" : "video/webm",
      "size" : 598893
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "989d586a96619184",
      "status" : "passed",
      "time" : {
        "start" : 1624445337183,
        "stop" : 1624445342612,
        "duration" : 5429
      }
    }, {
      "uid" : "94e75792681a2e8d",
      "status" : "passed",
      "time" : {
        "start" : 1624347404362,
        "stop" : 1624347412249,
        "duration" : 7887
      }
    }, {
      "uid" : "25c5793e0d52f766",
      "status" : "passed",
      "time" : {
        "start" : 1624030100729,
        "stop" : 1624030107525,
        "duration" : 6796
      }
    }, {
      "uid" : "ec4cd856278ef983",
      "status" : "passed",
      "time" : {
        "start" : 1624028645259,
        "stop" : 1624028652853,
        "duration" : 7594
      }
    }, {
      "uid" : "cd6625dd0d4bd8f4",
      "status" : "passed",
      "time" : {
        "start" : 1624024799945,
        "stop" : 1624024808829,
        "duration" : 8884
      }
    }, {
      "uid" : "4626cf9f46300dd2",
      "status" : "passed",
      "time" : {
        "start" : 1624016016749,
        "stop" : 1624016021983,
        "duration" : 5234
      }
    }, {
      "uid" : "d394954d02945ab7",
      "status" : "passed",
      "time" : {
        "start" : 1623950999997,
        "stop" : 1623951006688,
        "duration" : 6691
      }
    }, {
      "uid" : "21a5c5f0ea548905",
      "status" : "passed",
      "time" : {
        "start" : 1623950285235,
        "stop" : 1623950291267,
        "duration" : 6032
      }
    }, {
      "uid" : "8d02a4cb96559e1b",
      "status" : "passed",
      "time" : {
        "start" : 1623943479992,
        "stop" : 1623943488180,
        "duration" : 8188
      }
    }, {
      "uid" : "1af2b3d44c4e84b0",
      "status" : "passed",
      "time" : {
        "start" : 1623941473708,
        "stop" : 1623941479790,
        "duration" : 6082
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "2c9f31791712ad4d.json",
  "parameterValues" : [ ]
}