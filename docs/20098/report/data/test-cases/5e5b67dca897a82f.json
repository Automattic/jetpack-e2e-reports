{
  "uid" : "5e5b67dca897a82f",
  "name" : "Eventbrite block",
  "fullName" : "Eventbrite block",
  "historyId" : "0b4a15ebb314cfb213eb3e305bfce89d",
  "time" : {
    "start" : 1624445344937,
    "stop" : 1624445356289,
    "duration" : 11352
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const eventId = &quot;112691417062&quot;;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Eventbrite block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Eventbrite block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Eventbrite block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7db3303838adc50a",
      "name" : "1624445330580_beforeAll___Free_blocks.webm",
      "source" : "7db3303838adc50a.webm",
      "type" : "video/webm",
      "size" : 631128
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4b8175a65f5a4e8",
      "name" : "1624445308337_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "4b8175a65f5a4e8.webm",
      "type" : "video/webm",
      "size" : 271869
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9b95b1bf7fb4140",
      "name" : "1624445356111_Free_blocks___Eventbrite_block.webm",
      "source" : "9b95b1bf7fb4140.webm",
      "type" : "video/webm",
      "size" : 411959
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "b81d24f7405c3ff5",
      "status" : "passed",
      "time" : {
        "start" : 1624347414423,
        "stop" : 1624347423287,
        "duration" : 8864
      }
    }, {
      "uid" : "3cb135716caa9886",
      "status" : "passed",
      "time" : {
        "start" : 1624030110291,
        "stop" : 1624030119949,
        "duration" : 9658
      }
    }, {
      "uid" : "56f27b1778f139ba",
      "status" : "passed",
      "time" : {
        "start" : 1624028655812,
        "stop" : 1624028666870,
        "duration" : 11058
      }
    }, {
      "uid" : "d173ab8c2bf4f493",
      "status" : "passed",
      "time" : {
        "start" : 1624024811038,
        "stop" : 1624024819221,
        "duration" : 8183
      }
    }, {
      "uid" : "7ab99d55b3fc460",
      "status" : "passed",
      "time" : {
        "start" : 1624016024255,
        "stop" : 1624016035536,
        "duration" : 11281
      }
    }, {
      "uid" : "6f5fa3c0ad408a57",
      "status" : "passed",
      "time" : {
        "start" : 1623951009529,
        "stop" : 1623951018705,
        "duration" : 9176
      }
    }, {
      "uid" : "aa60cc8e066faf42",
      "status" : "passed",
      "time" : {
        "start" : 1623950293334,
        "stop" : 1623950300452,
        "duration" : 7118
      }
    }, {
      "uid" : "754f10e66fa202c7",
      "status" : "passed",
      "time" : {
        "start" : 1623943490939,
        "stop" : 1623943498707,
        "duration" : 7768
      }
    }, {
      "uid" : "fb57bf0e3b8dbba5",
      "status" : "passed",
      "time" : {
        "start" : 1623941482296,
        "stop" : 1623941491486,
        "duration" : 9190
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5e5b67dca897a82f.json",
  "parameterValues" : [ ]
}