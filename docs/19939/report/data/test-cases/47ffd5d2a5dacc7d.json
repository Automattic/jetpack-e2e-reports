{
  "uid" : "47ffd5d2a5dacc7d",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1624436306760,
    "stop" : 1624436312911,
    "duration" : 6151
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Pinterest block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9c0deed757cd9f41",
      "name" : "1624436298514_beforeAll___Free_blocks.webm",
      "source" : "9c0deed757cd9f41.webm",
      "type" : "video/webm",
      "size" : 640331
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7628e8d247120367",
      "name" : "1624436274690_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "7628e8d247120367.webm",
      "type" : "video/webm",
      "size" : 284323
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d18d78306e0cbe5b",
      "name" : "1624436312740_Free_blocks___Pinterest_block.webm",
      "source" : "d18d78306e0cbe5b.webm",
      "type" : "video/webm",
      "size" : 418735
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "5df359f19d5f8e06",
      "status" : "passed",
      "time" : {
        "start" : 1624430619729,
        "stop" : 1624430625243,
        "duration" : 5514
      }
    }, {
      "uid" : "ec11e8abf108e0b9",
      "status" : "passed",
      "time" : {
        "start" : 1624361078557,
        "stop" : 1624361083884,
        "duration" : 5327
      }
    }, {
      "uid" : "f7e8c6da4fb230d0",
      "status" : "passed",
      "time" : {
        "start" : 1624353741438,
        "stop" : 1624353747582,
        "duration" : 6144
      }
    }, {
      "uid" : "a71b70d5d70fe8dc",
      "status" : "passed",
      "time" : {
        "start" : 1623669144574,
        "stop" : 1623669151503,
        "duration" : 6929
      }
    }, {
      "uid" : "76bef8d50a3a56b8",
      "status" : "passed",
      "time" : {
        "start" : 1623405425346,
        "stop" : 1623405430611,
        "duration" : 5265
      }
    }, {
      "uid" : "4dba50b8a46b529d",
      "status" : "passed",
      "time" : {
        "start" : 1623358755565,
        "stop" : 1623358761235,
        "duration" : 5670
      }
    }, {
      "uid" : "929fabea019fd635",
      "status" : "passed",
      "time" : {
        "start" : 1623325925938,
        "stop" : 1623325932067,
        "duration" : 6129
      }
    }, {
      "uid" : "a3a4dee260f30364",
      "status" : "passed",
      "time" : {
        "start" : 1623321349924,
        "stop" : 1623321355937,
        "duration" : 6013
      }
    }, {
      "uid" : "e61d52113449a6c0",
      "status" : "passed",
      "time" : {
        "start" : 1623319061279,
        "stop" : 1623319066576,
        "duration" : 5297
      }
    }, {
      "uid" : "ca7a7ba700179e80",
      "status" : "passed",
      "time" : {
        "start" : 1623238218355,
        "stop" : 1623238224428,
        "duration" : 6073
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "47ffd5d2a5dacc7d.json",
  "parameterValues" : [ ]
}