{
  "uid" : "8f19099b4d3039cf",
  "name" : "Can perform search with default settings",
  "fullName" : "Can perform search with default settings",
  "historyId" : "8a48effa07b2a0dc8118fcc35772e118",
  "time" : {
    "start" : 1637336954824,
    "stop" : 1637336955039,
    "duration" : 215
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _reporters.testStep)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _reporters.testStep)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _reporters.testStep)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _reporters.testStep)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _reporters.testStep)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  await (0, _reporters.testStep)(\n    &quot;Can open the overlay by entering a query&quot;,\n    async () =&gt; {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    &quot;Can show search controls in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    &quot;Can show search results in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    &quot;Can sort results by relevance by default&quot;,\n    async () =&gt; {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        &quot;&lt;mark&gt;Test1&lt;/mark&gt; Record 1&quot;\n      );\n    }\n  );\n  await (0, _reporters.testStep)(&quot;Can edit query in search form&quot;, async () =&gt; {\n    await homepage.enterQueryToOverlay(&quot;test2&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 1&quot;\n    );\n  });\n  await (0, _reporters.testStep)(&quot;Can change sort order&quot;, async () =&gt; {\n    await homepage.chooseSortingLink(&quot;newest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;newest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n    await homepage.chooseSortingLink(&quot;oldest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;oldest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n  });\n  await (0, _reporters.testStep)(&quot;Can apply filters&quot;, async () =&gt; {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n  });\n  await (0, _reporters.testStep)(\n    &quot;Can close overlay by clicking the cross&quot;,\n    async () =&gt; {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Error",
  "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-32301,\"message\":\"transport error - HTTP status code was not 200 (404)\"}\n",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-32301,\"message\":\"transport error - HTTP status code was not 200 (404)\"}\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c929db8ec7db6346",
      "name" : "beforeAll - Search",
      "source" : "c929db8ec7db6346.png",
      "type" : "image/png",
      "size" : 307904
    }, {
      "uid" : "b7becc3b2b6b5426",
      "name" : "1637336952257_beforeAll___Search.webm",
      "source" : "b7becc3b2b6b5426.webm",
      "type" : "video/webm",
      "size" : 544279
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _reporters.testStep)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _reporters.testStep)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _reporters.testStep)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _reporters.testStep)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _reporters.testStep)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-32301,\"message\":\"transport error - HTTP status code was not 200 (404)\"}\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "52db6a81a5687931",
      "name" : "1637336954991_Search___Can_perform_search_with_default_settings.webm",
      "source" : "52db6a81a5687931.webm",
      "type" : "video/webm",
      "size" : 1409
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "search.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 13
      },
      "items" : [ {
        "uid" : "944f17914045c776",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/944f17914045c776",
        "status" : "passed",
        "time" : {
          "start" : 1637266827544,
          "stop" : 1637266832738,
          "duration" : 5194
        }
      }, {
        "uid" : "b4ff3f84b9dd198b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/b4ff3f84b9dd198b",
        "status" : "passed",
        "time" : {
          "start" : 1637253557044,
          "stop" : 1637253564361,
          "duration" : 7317
        }
      }, {
        "uid" : "44629ee3f9a1b5b5",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/44629ee3f9a1b5b5",
        "status" : "passed",
        "time" : {
          "start" : 1637082685119,
          "stop" : 1637082688420,
          "duration" : 3301
        }
      }, {
        "uid" : "f4a52273a87756fd",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/f4a52273a87756fd",
        "status" : "passed",
        "time" : {
          "start" : 1637016742795,
          "stop" : 1637016747568,
          "duration" : 4773
        }
      }, {
        "uid" : "8a05ab2ef8585e38",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/8a05ab2ef8585e38",
        "status" : "passed",
        "time" : {
          "start" : 1636477069629,
          "stop" : 1636477074944,
          "duration" : 5315
        }
      }, {
        "uid" : "d82abd61d2d2247f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/d82abd61d2d2247f",
        "status" : "passed",
        "time" : {
          "start" : 1636411172827,
          "stop" : 1636411176767,
          "duration" : 3940
        }
      }, {
        "uid" : "5715e9ce0eb28069",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/5715e9ce0eb28069",
        "status" : "passed",
        "time" : {
          "start" : 1635444899639,
          "stop" : 1635444904588,
          "duration" : 4949
        }
      }, {
        "uid" : "3e1fbe3c7bd4c8eb",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/3e1fbe3c7bd4c8eb",
        "status" : "passed",
        "time" : {
          "start" : 1635429270011,
          "stop" : 1635429274737,
          "duration" : 4726
        }
      }, {
        "uid" : "fba362440feefa70",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/fba362440feefa70",
        "status" : "passed",
        "time" : {
          "start" : 1635425306054,
          "stop" : 1635425309798,
          "duration" : 3744
        }
      }, {
        "uid" : "6781b1ea145ccc93",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/6781b1ea145ccc93",
        "status" : "passed",
        "time" : {
          "start" : 1635367825542,
          "stop" : 1635367829492,
          "duration" : 3950
        }
      }, {
        "uid" : "187f0852a94fd2ec",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/187f0852a94fd2ec",
        "status" : "passed",
        "time" : {
          "start" : 1635193694603,
          "stop" : 1635193699650,
          "duration" : 5047
        }
      }, {
        "uid" : "d17ad718907907a3",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20914/report/#testresult/d17ad718907907a3",
        "status" : "passed",
        "time" : {
          "start" : 1634937934912,
          "stop" : 1634937939199,
          "duration" : 4287
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8f19099b4d3039cf.json",
  "parameterValues" : [ ]
}