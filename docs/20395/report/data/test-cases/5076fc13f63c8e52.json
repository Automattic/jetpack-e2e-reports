{
  "uid" : "5076fc13f63c8e52",
  "name" : "Pay with PayPal",
  "fullName" : "Pay with PayPal",
  "historyId" : "2b956f1af1e91da7ea3b442b8c2cddca",
  "time" : {
    "start" : 1628507999095,
    "stop" : 1628507999123,
    "duration" : 28
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a Pay with PayPal block\", async () => {\n    await blockEditor.waitForAvailableBlock(_simplePayments.default.name());\n    blockId = await blockEditor.insertBlock(\n      _simplePayments.default.name(),\n      _simplePayments.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\n    \"Fill details of Pay with PayPal block\",\n    async () => {\n      const spBlock = new _simplePayments.default(blockId, page);\n      await spBlock.fillDetails();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that Pay with PayPal block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_simplePayments.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a Pay with PayPal block&quot;, async () =&gt; {\n    await blockEditor.waitForAvailableBlock(_simplePayments.default.name());\n    blockId = await blockEditor.insertBlock(\n      _simplePayments.default.name(),\n      _simplePayments.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\n    &quot;Fill details of Pay with PayPal block&quot;,\n    async () =&gt; {\n      const spBlock = new _simplePayments.default(blockId, page);\n      await spBlock.fillDetails();\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that Pay with PayPal block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_simplePayments.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "expect(received).toMatch(expected)\n",
  "statusTrace" : "Expected pattern: /Success: .* has been activated./i\nReceived string:  \"Error: 'wp' is not a registered wp command. See 'wp help' for available commands.\nDid you mean 'db'?\"",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "failed",
    "statusMessage" : "expect(received).toMatch(expected)\n",
    "statusTrace" : "Expected pattern: /Success: .* has been activated./i\nReceived string:  \"Error: 'wp' is not a registered wp command. See 'wp help' for available commands.\nDid you mean 'db'?\"",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "aaa6ae4281f6985d",
      "name" : "beforeAll - Paid blocks",
      "source" : "aaa6ae4281f6985d.png",
      "type" : "image/png",
      "size" : 248210
    }, {
      "uid" : "4cafd23efff70781",
      "name" : "1628507998121_beforeAll___Paid_blocks.webm",
      "source" : "4cafd23efff70781.webm",
      "type" : "video/webm",
      "size" : 582283
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "b73b37909525a65d",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20395/report/#testresult/b73b37909525a65d",
        "status" : "broken",
        "statusDetails" : "SyntaxError",
        "time" : {
          "start" : 1628506358268,
          "stop" : 1628506358342,
          "duration" : 74
        }
      }, {
        "uid" : "52c7b345f96f0b14",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20395/report/#testresult/52c7b345f96f0b14",
        "status" : "broken",
        "statusDetails" : "SyntaxError",
        "time" : {
          "start" : 1627047299319,
          "stop" : 1627047299352,
          "duration" : 33
        }
      }, {
        "uid" : "cbd1d85de006287c",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20395/report/#testresult/cbd1d85de006287c",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626972151798,
          "stop" : 1626972182344,
          "duration" : 30546
        }
      }, {
        "uid" : "58c10835c9f3fe12",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20395/report/#testresult/58c10835c9f3fe12",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1626961182200,
          "stop" : 1626961182226,
          "duration" : 26
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5076fc13f63c8e52.json",
  "parameterValues" : [ ]
}