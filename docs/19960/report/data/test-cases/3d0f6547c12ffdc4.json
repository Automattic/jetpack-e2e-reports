{
  "uid" : "3d0f6547c12ffdc4",
  "name" : "Eventbrite block",
  "fullName" : "Eventbrite block",
  "historyId" : "0b4a15ebb314cfb213eb3e305bfce89d",
  "time" : {
    "start" : 1624038200603,
    "stop" : 1624038211218,
    "duration" : 10615
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const eventId = &quot;112691417062&quot;;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Eventbrite block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Eventbrite block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Eventbrite block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "54d9455836cc03c",
      "name" : "1624038188374_beforeAll___Free_blocks.webm",
      "source" : "54d9455836cc03c.webm",
      "type" : "video/webm",
      "size" : 554283
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "69537b93943815c0",
      "name" : "1624038170703_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "69537b93943815c0.webm",
      "type" : "video/webm",
      "size" : 256708
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5f7242f664a22c35",
      "name" : "1624038211110_Free_blocks___Eventbrite_block.webm",
      "source" : "5f7242f664a22c35.webm",
      "type" : "video/webm",
      "size" : 418409
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "2ddb741fbdcf111b",
      "status" : "passed",
      "time" : {
        "start" : 1624031906599,
        "stop" : 1624031916264,
        "duration" : 9665
      }
    }, {
      "uid" : "e27a17f4e147ab8a",
      "status" : "passed",
      "time" : {
        "start" : 1624030298142,
        "stop" : 1624030305671,
        "duration" : 7529
      }
    }, {
      "uid" : "53322f70b5d20fed",
      "status" : "passed",
      "time" : {
        "start" : 1624028998024,
        "stop" : 1624029008000,
        "duration" : 9976
      }
    }, {
      "uid" : "10bc7f42f24db3e7",
      "status" : "passed",
      "time" : {
        "start" : 1623870480680,
        "stop" : 1623870489130,
        "duration" : 8450
      }
    }, {
      "uid" : "92c73bc73b1b981b",
      "status" : "passed",
      "time" : {
        "start" : 1623868778114,
        "stop" : 1623868785484,
        "duration" : 7370
      }
    }, {
      "uid" : "ebeee7b9930317",
      "status" : "passed",
      "time" : {
        "start" : 1623851778395,
        "stop" : 1623851786205,
        "duration" : 7810
      }
    }, {
      "uid" : "376040be8fced7ba",
      "status" : "passed",
      "time" : {
        "start" : 1623850653326,
        "stop" : 1623850662286,
        "duration" : 8960
      }
    }, {
      "uid" : "a9543f212e50d579",
      "status" : "passed",
      "time" : {
        "start" : 1623849422843,
        "stop" : 1623849430268,
        "duration" : 7425
      }
    }, {
      "uid" : "476a944f22869865",
      "status" : "passed",
      "time" : {
        "start" : 1623764728510,
        "stop" : 1623764738198,
        "duration" : 9688
      }
    }, {
      "uid" : "8a57f974fbab1ced",
      "status" : "passed",
      "time" : {
        "start" : 1623700549849,
        "stop" : 1623700559506,
        "duration" : 9657
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "3d0f6547c12ffdc4.json",
  "parameterValues" : [ ]
}