{
  "uid" : "dcc3fd168570d3fa",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1637294091289,
    "stop" : 1637294091390,
    "duration" : 101
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _reporters.testStep)(\"Add a Pinterest block\", async () => {\n    const blockId = await blockEditor.insertBlock(\n      _wpAdmin.PinterestBlock.name(),\n      _wpAdmin.PinterestBlock.title()\n    );\n    const pinterestBlock = new _wpAdmin.PinterestBlock(blockId, page, pinId);\n    await pinterestBlock.addEmbed();\n  });\n  await (0, _reporters.testStep)(\n    \"Publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _pages.PostFrontendPage.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wpAdmin.PinterestBlock, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _reporters.testStep)(&quot;Add a Pinterest block&quot;, async () =&gt; {\n    const blockId = await blockEditor.insertBlock(\n      _wpAdmin.PinterestBlock.name(),\n      _wpAdmin.PinterestBlock.title()\n    );\n    const pinterestBlock = new _wpAdmin.PinterestBlock(blockId, page, pinId);\n    await pinterestBlock.addEmbed();\n  });\n  await (0, _reporters.testStep)(\n    &quot;Publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _reporters.testStep)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _pages.PostFrontendPage.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wpAdmin.PinterestBlock, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Error",
  "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-10520,\"message\":\"Jetpack: [invalid_signature] The required &quot;url&quot; parameter is malformed.\"}\n",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-10520,\"message\":\"Jetpack: [invalid_signature] The required &quot;url&quot; parameter is malformed.\"}\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d06a5614977858bf",
      "name" : "beforeAll - Free blocks",
      "source" : "d06a5614977858bf.png",
      "type" : "image/png",
      "size" : 36021
    }, {
      "uid" : "899985e8b7ac45d0",
      "name" : "1637294090741_beforeAll___Free_blocks.webm",
      "source" : "899985e8b7ac45d0.webm",
      "type" : "video/webm",
      "size" : 242789
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _reporters.testStep)(\"Add a Pinterest block\", async () => {\n    const blockId = await blockEditor.insertBlock(\n      _wpAdmin.PinterestBlock.name(),\n      _wpAdmin.PinterestBlock.title()\n    );\n    const pinterestBlock = new _wpAdmin.PinterestBlock(blockId, page, pinId);\n    await pinterestBlock.addEmbed();\n  });\n  await (0, _reporters.testStep)(\n    \"Publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _reporters.testStep)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _pages.PostFrontendPage.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wpAdmin.PinterestBlock, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "Jetpack Start provision is failed. Response: {\"error\":-10520,\"message\":\"Jetpack: [invalid_signature] The required &quot;url&quot; parameter is malformed.\"}\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "61c70a267784c530",
      "name" : "1637294091352_Free_blocks___Pinterest_block.webm",
      "source" : "61c70a267784c530.webm",
      "type" : "video/webm",
      "size" : 1409
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 5,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "486e483a3a006697",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20029/report/#testresult/486e483a3a006697",
        "status" : "passed",
        "time" : {
          "start" : 1637160021733,
          "stop" : 1637160028912,
          "duration" : 7179
        }
      }, {
        "uid" : "53375351440830d9",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20029/report/#testresult/53375351440830d9",
        "status" : "passed",
        "time" : {
          "start" : 1636782043643,
          "stop" : 1636782051196,
          "duration" : 7553
        }
      }, {
        "uid" : "9edb5b2525fee04f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20029/report/#testresult/9edb5b2525fee04f",
        "status" : "passed",
        "time" : {
          "start" : 1636650588730,
          "stop" : 1636650595331,
          "duration" : 6601
        }
      }, {
        "uid" : "a4ae3164d6337333",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20029/report/#testresult/a4ae3164d6337333",
        "status" : "passed",
        "time" : {
          "start" : 1636648434715,
          "stop" : 1636648441440,
          "duration" : 6725
        }
      }, {
        "uid" : "4a2b1bff93182149",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20029/report/#testresult/4a2b1bff93182149",
        "status" : "passed",
        "time" : {
          "start" : 1636608681385,
          "stop" : 1636608689516,
          "duration" : 8131
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "dcc3fd168570d3fa.json",
  "parameterValues" : [ ]
}