{
  "uid" : "fd3b6c12362c23cb",
  "name" : "Pay with PayPal",
  "fullName" : "Pay with PayPal",
  "historyId" : "2b956f1af1e91da7ea3b442b8c2cddca",
  "time" : {
    "start" : 1629204350157,
    "stop" : 1629204350186,
    "duration" : 29
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a Pay with PayPal block\", async () => {\n    await blockEditor.waitForAvailableBlock(_simplePayments.default.name());\n    blockId = await blockEditor.insertBlock(\n      _simplePayments.default.name(),\n      _simplePayments.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\n    \"Fill details of Pay with PayPal block\",\n    async () => {\n      const spBlock = new _simplePayments.default(blockId, page);\n      await spBlock.fillDetails();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that Pay with PayPal block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_simplePayments.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a Pay with PayPal block&quot;, async () =&gt; {\n    await blockEditor.waitForAvailableBlock(_simplePayments.default.name());\n    blockId = await blockEditor.insertBlock(\n      _simplePayments.default.name(),\n      _simplePayments.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\n    &quot;Fill details of Pay with PayPal block&quot;,\n    async () =&gt; {\n      const spBlock = new _simplePayments.default(blockId, page);\n      await spBlock.fillDetails();\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that Pay with PayPal block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_simplePayments.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Error",
  "statusTrace" : "page.fill: value: expected string, got undefined",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "Error",
    "statusTrace" : "page.fill: value: expected string, got undefined",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "38da9e74d50d37e8",
      "name" : "beforeAll - Paid blocks",
      "source" : "38da9e74d50d37e8.png",
      "type" : "image/png",
      "size" : 58910
    }, {
      "uid" : "b5a6dd42fdc087eb",
      "name" : "1629204349073_beforeAll___Paid_blocks.webm",
      "source" : "b5a6dd42fdc087eb.webm",
      "type" : "video/webm",
      "size" : 190271
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "6d98b5bd6734da0f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20706/report/#testresult/6d98b5bd6734da0f",
        "status" : "passed",
        "time" : {
          "start" : 1629124959066,
          "stop" : 1629124963326,
          "duration" : 4260
        }
      }, {
        "uid" : "e77f84ef39917df8",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20706/report/#testresult/e77f84ef39917df8",
        "status" : "passed",
        "time" : {
          "start" : 1629118348124,
          "stop" : 1629118353398,
          "duration" : 5274
        }
      }, {
        "uid" : "407156ea10dadfb8",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20706/report/#testresult/407156ea10dadfb8",
        "status" : "passed",
        "time" : {
          "start" : 1629117293947,
          "stop" : 1629117299358,
          "duration" : 5411
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fd3b6c12362c23cb.json",
  "parameterValues" : [ ]
}