{
  "uid" : "df1242e5c673cba9",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1624034370807,
    "stop" : 1624034378814,
    "duration" : 8007
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Pinterest block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "11655350886a69df",
      "name" : "1624034362396_beforeAll___Free_blocks.webm",
      "source" : "11655350886a69df.webm",
      "type" : "video/webm",
      "size" : 557072
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "58923ef7d93396f0",
      "name" : "1624034343482_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "58923ef7d93396f0.webm",
      "type" : "video/webm",
      "size" : 414452
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be41b7762001bccd",
      "name" : "1624034378698_Free_blocks___Pinterest_block.webm",
      "source" : "be41b7762001bccd.webm",
      "type" : "video/webm",
      "size" : 581815
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "ca9aff8f6ca4c336",
      "status" : "passed",
      "time" : {
        "start" : 1623960571383,
        "stop" : 1623960576282,
        "duration" : 4899
      }
    }, {
      "uid" : "79b6a0dbbaf2bbc2",
      "status" : "passed",
      "time" : {
        "start" : 1623959975651,
        "stop" : 1623959981548,
        "duration" : 5897
      }
    }, {
      "uid" : "5319f9525c948ac0",
      "status" : "passed",
      "time" : {
        "start" : 1623955796344,
        "stop" : 1623955803790,
        "duration" : 7446
      }
    }, {
      "uid" : "7cd95c1191c6fff3",
      "status" : "passed",
      "time" : {
        "start" : 1623879053211,
        "stop" : 1623879060072,
        "duration" : 6861
      }
    }, {
      "uid" : "70b5dd16c4566494",
      "status" : "passed",
      "time" : {
        "start" : 1623878173491,
        "stop" : 1623878180444,
        "duration" : 6953
      }
    }, {
      "uid" : "55fe857139d29bbf",
      "status" : "passed",
      "time" : {
        "start" : 1623861162274,
        "stop" : 1623861169151,
        "duration" : 6877
      }
    }, {
      "uid" : "cb54fb0737198402",
      "status" : "passed",
      "time" : {
        "start" : 1623795828614,
        "stop" : 1623795835462,
        "duration" : 6848
      }
    }, {
      "uid" : "e7eab5528f7552a1",
      "status" : "passed",
      "time" : {
        "start" : 1623793952409,
        "stop" : 1623793959692,
        "duration" : 7283
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "df1242e5c673cba9.json",
  "parameterValues" : [ ]
}