{"version":3,"sources":["components/ReportsTable.js","Reports.js","components/E2EMetrics.js","components/PerfMetrics.js","Metrics.js","App.js","index.js"],"names":["ReportsTable","state","reports","props","sort","by","isAsc","this","sortTable","setState","sortByName","sortByDate","sortByStatus","isSortAsc","r1","r2","Date","parse","lastUpdate","name","statistic","failed","broken","sortButtons","reportCount","head","klass","options","Object","keys","map","key","index","Button","variant","onClick","toUpperCase","className","length","colSpan","report","id","metadata","isFailed","total","passed","skipped","getReportLinkCell","getTestResultsCell","getMetadataCell","totalTests","linkUrl","reportKey","reportTitle","pr_title","prNumber","pr_number","branchUrl","branch","prUrl","statusIcon","faQuestion","statusClassName","faTimes","faCheck","icon","href","target","rel","ReactGA","pageview","faCodeBranch","counts","label","count","Badge","runUrl","run_id","toLocaleString","Table","hover","responsive","size","getTableHeader","getReportRow","React","Component","Reports","pinnedReports","docsSize","undefined","reportsCount","isDataFetched","fetch","headers","Accept","then","response","json","jsonData","prReports","configData","permanent","includes","push","catch","console","log","E2EMetrics","data","stats","failedTests","statsChartData","result","forEach","record","date","time","start","toISOString","split","unknown","assign","values","parseStats","reduce","acc","stat","testCases","JSON","stringify","failureRate","test","fileName","error","statusMessage","statusTrace","substring","LineChart","width","height","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","isAnimationActive","renderStatsSummary","renderSummaryChart","PerfMetrics","rawData","byDate","percentage","baseAvg","metric","base","jetpackAvg","entries","recArry","a","rec","Math","round","chartData","prepareChartData","renderChart","Metrics","initialize","linkOnSelect","setActiveNavbar","navbar","location","hash","NavBar","activeNavbar","Navbar","expand","Container","fluid","Brand","Toggle","aria-controls","Collapse","Nav","activeKey","Link","onSelect","App","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mfAWqBA,E,4MACpBC,MAAQ,CACPC,QAAS,EAAKC,MAAMD,QACpBE,KAAM,CAAEC,GAAI,aAAcC,OAAO,I,uDAGlC,WACCC,KAAKC,UAAWD,KAAKN,MAAMG,KAAKC,GAAIE,KAAKN,MAAMG,KAAKE,S,uBAGrD,SAAWD,EAAIC,GAGd,OAFAC,KAAKE,SAAU,CAAEL,KAAM,CAAEC,KAAIC,WAEpBD,GACR,IAAK,OACJ,OAAOE,KAAKG,WAAYJ,GACzB,IAAK,aACJ,OAAOC,KAAKI,WAAYL,GACzB,IAAK,YACJ,OAAOC,KAAKK,aAAcN,M,wBAI7B,SAAYO,GACX,OAAON,KAAKN,MAAMC,QAAQE,MAAM,SAAEU,EAAIC,GACrC,OAAKF,EAEHG,KAAKC,MAAOH,EAAGI,YAAeF,KAAKC,MAAOF,EAAGG,YAGxCF,KAAKC,MAAOF,EAAGG,YAAeF,KAAKC,MAAOH,EAAGI,iB,wBAItD,SAAYL,GACX,OAAON,KAAKN,MAAMC,QAAQE,MAAM,SAAEU,EAAIC,GAAN,OAC/BF,EAAYC,EAAGK,KAAOJ,EAAGI,KAAOJ,EAAGI,KAAOL,EAAGK,U,0BAI/C,SAAcN,GACb,OAAON,KAAKN,MAAMC,QAAQE,MAAM,SAAEU,EAAIC,GACrC,OAAKF,EAEHC,EAAGM,UAAUC,OACbP,EAAGM,UAAUE,QACXP,EAAGK,UAAUC,OAASN,EAAGK,UAAUE,QAItCP,EAAGK,UAAUC,OACbN,EAAGK,UAAUE,QACXR,EAAGM,UAAUC,OAASP,EAAGM,UAAUE,a,4BAKxC,WAAkB,IAQbC,EAyBAC,EAjCY,OACVC,EAAO,CACZN,KAAM,YACNC,UAAW,iBACXF,WAAY,eAGPQ,EAAQnB,KAAKN,MAAMG,KAAKE,MAAQ,cAAgB,eA+BtD,OA5BKC,KAAKJ,MAAMwB,QAAQJ,cACvBA,EAAcK,OAAOC,KAAMJ,GAAOK,KAAK,SAAEC,EAAKC,GAC7C,OACC,eAACC,EAAA,EAAD,CACCC,QAAQ,OAERC,QAAU,WACT,EAAK3B,UAAWuB,GAAO,EAAK9B,MAAMG,KAAKE,QAJzC,UAOGmB,EAAMM,GAAMK,cAEb,sBACCC,UACC,EAAKpC,MAAMG,KAAKC,KAAO0B,EAAML,EAAQ,OATlCM,OAmBLzB,KAAKJ,MAAMqB,cACfA,EAAW,UAAOjB,KAAKN,MAAMC,QAAQoC,OAA1B,aAIX,gCACC,oBAAID,UAAY,YAAhB,SACC,oBAAIE,QAAQ,IAAIF,UAAY,cAA5B,SACC,sBAAKA,UAAY,iCAAjB,UACC,8BAAOb,IACP,8BAAOD,e,0BAQb,SAAciB,EAAQC,GACrB,IAAQrB,EAAwBoB,EAAxBpB,UAAWsB,EAAaF,EAAbE,SACbC,EACLvB,EAAUwB,QAAUxB,EAAUyB,OAASzB,EAAU0B,QAClD,OACC,+BACC,oBAAIT,UAAY,iBAAhB,SACG9B,KAAKwC,kBACNP,EACAE,EACAC,EACAvB,EAAUwB,SAGZ,6BAAMrC,KAAKyC,mBAAoB5B,KAC/B,6BAAMb,KAAK0C,gBAAiBT,OAVnBC,K,+BAeZ,SAAmBD,EAAQE,EAAUC,EAAUO,GAC9C,IAAMC,EAAO,2DAAwDX,EAAOrB,KAA/D,YAEPiC,EAAYZ,EAAOrB,KACrBkC,EAAcb,EAAOrB,KAEzB,GAAKuB,EAASY,SAAW,CACxB,IAAMC,EAAQ,YAASb,EAASc,UAAlB,KACdH,EAAW,UAAOX,EAASY,SAAhB,YAA8BC,GAG1C,IAAME,EAAS,qDAAkDf,EAASgB,QACpEC,EAAK,qDAAkDjB,EAASc,WAElEI,EAAaC,IACbC,EAAkB,UAMtB,OALKZ,EAAa,IACjBU,EAAajB,EAAWoB,IAAUC,IAClCF,EAAkBnB,EAAW,SAAW,UAIxC,qBAAIN,UAAY,gBAAhB,UACC,+BACC,cAAC,IAAD,CACCA,UAAYyB,EACZG,KAAOL,IAHT,OAMC,oBACCM,KAAOf,EACPd,UAAU,cACV8B,OAAO,SACPC,IAAI,aACJjC,QAAU,kBAAMkC,IAAQC,SAAU,IAAM9B,EAAOrB,OALhD,UAOGkC,EACF,6BAGF,6BACC,sCACID,EADJ,IACkB,WACjB,cAAC,IAAD,CAAiBa,KAAOM,MAAmB,IAC3C,mBACCL,KAAOT,EACPU,OAAS,SACT9B,UAAY,cACZ+B,IAAI,aAJL,SAMG1B,EAASgB,SAEVhB,EAASc,UAAY,WAAQ,GAC7Bd,EAASc,WACV,oBACCU,KAAOP,EACPQ,OAAS,SACT9B,UAAY,cACZ+B,IAAM,aAJP,gBAMM1B,EAASc,uB,gCASrB,SAAoBpC,GACnB,IAAMoD,EAAS,CAAE,SAAU,SAAU,SAAU1C,KAAK,SAAE2C,EAAOhC,GAC5D,IAAMiC,EACK,WAAVD,EACGrD,EAAWqD,GAAUrD,EAAUE,OAC/BF,EAAWqD,GACf,OACC,eAACE,EAAA,EAAD,CAAkBtC,UAAS,6BAA0BoC,GAArD,UACGA,EADH,IACaC,IADAjC,MAMf,OAAO,8BAAO+B,M,6BAGf,SAAiBhC,GAChB,IAAMoC,EAAM,6DAA0DpC,EAAOE,SAASmC,QACtF,OACC,qBAAIxC,UAAY,gBAAhB,UACC,6BACC,iDACe,IACZ,IAAIrB,KACLA,KAAKC,MAAOuB,EAAOtB,aAClB4D,sBAGJ,6BACC,iDACe,IACd,mBACCZ,KAAOU,EACPT,OAAS,SACT9B,UAAY,cACZ+B,IAAI,aAJL,SAMG5B,EAAOE,SAASmC,mB,oBAQxB,WAAU,IAAD,OACR,OACC,eAACE,EAAA,EAAD,CACCC,OAAK,EACLC,WAAW,KACXC,KAAK,KACLhD,QAAQ,OACRG,UAAU,eALX,UAOG9B,KAAK4E,iBACP,gCACG5E,KAAKN,MAAMC,QAAQ4B,KAAK,SAAEU,EAAQC,GAAV,OACzB,EAAK2C,aAAc5C,EAAQC,QAG7B,gCACC,6BACC,oBAAIF,QAAU,e,GApQsB8C,IAAMC,WCN3BC,E,kDACpB,WAAapF,GAAS,IAAD,8BACpB,cAAOA,IACFF,MAAQ,CACZC,QAAS,GACTsF,cAAe,GACfC,cAAUC,EACVC,kBAAcD,EACdE,eAAe,GAPI,E,qDAWrB,WAAqB,IAAD,OACnBC,MAAO,sBAAuB,CAC7BC,QAAS,CACR,eAAgB,mBAChBC,OAAQ,sBAGRC,MAAM,SAAEC,GAAF,OAAgBA,EAASC,UAC/BF,MAAM,SAAEG,GACR,IADsB,EAChBC,EAAY,CAAElG,QAAS,IACvBsF,EAAgB,CAAEtF,QAAS,IAFX,cAIAiG,EAASjG,SAJT,IAItB,2BAAyC,CAAC,IAA9BsC,EAA6B,QACnC6D,EAAWC,UAAUC,SAAU/D,EAAOrB,MAC1CqE,EAActF,QAAQsG,KAAMhE,GAE5B4D,EAAUlG,QAAQsG,KAAMhE,IARJ,8BAYtB,EAAK/B,SAAU,CACdP,QAASkG,EAAUlG,QACnBsF,cAAeA,EAActF,QAC7BuF,SAAUU,EAASV,SACnBE,aAAcQ,EAASR,aACvBC,eAAe,OAGhBa,MAAOC,QAAQC,KACjBtC,IAAQC,SAAU,c,oBAGnB,WACC,OAAO/D,KAAKN,MAAM2F,cAEjB,gCACC,sBAAKvD,UAAY,iBAAjB,UACG9B,KAAKN,MAAM0F,aADd,cAGA,cAAC,EAAD,CACCzF,QAAUK,KAAKN,MAAMuF,cACrB7D,QAAU,CACTH,aAAa,EACbD,aAAa,KAGf,cAAC,EAAD,CACCrB,QAAUK,KAAKN,MAAMC,QACrByB,QAAU,CACTH,aAAa,EACbD,aAAa,KAGf,wBAAOc,UAAY,WAAnB,wBACc9B,KAAKN,MAAMwF,eArBc,S,GA7CNJ,IAAMC,W,6DCQtBsB,E,kDACpB,WAAazG,GAAS,IAAD,8BACpB,cAAOA,IACFF,MAAQ,CACZ4G,KAAM,CAAE3G,QAAS,IACjB4G,MAAO,GACPC,YAAa,GACbC,eAAgB,IANG,E,8CAUrB,WACC,IAAMC,EAAS,GAEf1G,KAAKN,MAAM6G,MAAMI,SAAS,SAAEC,GAC3B,IACMC,EADU,IAAIpG,KAAMmG,EAAOE,KAAKC,OACjBC,cAAcC,MAAO,KAAO,GAE1CP,EAAQG,IAMdH,EAAQG,GAAO/F,QACd8F,EAAO/F,UAAUC,OAAS8F,EAAO/F,UAAUE,OAC5C2F,EAAQG,GAAOtE,SAAWqE,EAAO/F,UAAU0B,QAC3CmE,EAAQG,GAAOvE,QAAUsE,EAAO/F,UAAUyB,OAC1CoE,EAAQG,GAAOK,SAAWN,EAAO/F,UAAUqG,QAC3CR,EAAQG,GAAOxE,OAASuE,EAAO/F,UAAUwB,QAVzCqE,EAAQG,GAASxF,OAAO8F,OAAQ,GAAIP,EAAO/F,WAC3C6F,EAAQG,GAAO/F,QAAU8F,EAAO/F,UAAUE,OAE1C2F,EAAQG,GAAOA,KAAOA,MAWxB7G,KAAKE,SAAU,CAAEuG,eAAgBpF,OAAO+F,OAAQV,O,+BAGjD,WAAqB,IAAD,OACnBpB,MAAO,sBAAuB,CAC7BC,QAAS,CACR,eAAgB,mBAChBC,OAAQ,sBAGRC,MAAM,SAAEC,GAAF,OAAgBA,EAASC,UAC/BF,MAAM,SAAEG,GACR,EAAK1F,SAAU,CAAEqG,MAAOX,EAASW,QACjC,EAAKrG,SAAU,CAAEsG,YAAaZ,EAASY,cACvC,EAAKa,gBAELnB,MAAOC,QAAQC,KAEjBtC,IAAQC,SAAU,c,gCAGnB,WACC,IAAMwC,EAAQvG,KAAKN,MAAM6G,MAAMe,QAC9B,SAAEC,EAAKC,GAIN,OAHAD,EAAIzG,QAAU0G,EAAK3G,UAAUC,OAAS0G,EAAK3G,UAAUE,OACrDwG,EAAIE,WAAaD,EAAK3G,UAAUwB,MAChCkF,EAAIlF,QACGkF,IAER,CAAEzG,OAAQ,EAAG2G,UAAW,EAAGpF,MAAO,IAEnC8D,QAAQC,IAAKsB,KAAKC,UAAWpB,IAE7B,IAAMqB,EAAgBrB,EAAMzF,OAASyF,EAAMkB,UAAc,IACzD,OACC,8BACC,2CACaG,EADb,oBAC6C,IAC1CrB,EAAMkB,UAFT,gBAEmClB,EAAMlE,a,+BAM5C,WAEC,OADoBrC,KAAKN,MAAM8G,YACZjF,KAAK,SAAEsG,EAAM3F,GAAR,OACvB,gCACG2F,EAAKC,SADR,IACqBD,EAAKjH,KAD1B,IACmCiH,EAAKE,MAAMC,cAAiB,IAC5DH,EAAKE,MAAME,YAAYC,UAAW,MAF1BhG,Q,gCAOb,WACC,OACC,8BACC,eAACiG,EAAA,EAAD,CACCC,MAAQ,KACRC,OAAS,IACT/B,KAAOtG,KAAKN,MAAM+G,eAClB6B,OAAS,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,EAAGC,KAAM,IAJhD,UAMC,cAACC,EAAA,EAAD,CAAeC,OAAO,UACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,UAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,UACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,SACRF,OAAO,UACPQ,mBAAoB,IAErB,cAACF,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,SACRF,OAAO,UACPQ,mBAAoB,W,oBAOzB,WACC,OACC,gCACGpJ,KAAKqJ,qBACLrJ,KAAKsJ,4B,GA1H6BxE,IAAMC,WCAzBwE,E,kDACpB,WAAa3J,GAAS,IAAD,8BACpB,cAAOA,IACFF,MAAQ,CACZ8J,QAAS,IAHU,E,oDAOrB,WACC,IAAM9C,EAAS,GAIT+C,EAAS,GACfzJ,KAAKN,MAAM8J,QAAQ7C,SAAS,SAAEC,GAC7B,IAAIC,EAAO,IAAIpG,KAAMmG,EAAOC,MAC5BA,EAAOA,EAAKG,cAAcC,MAAO,KAAO,GACjCwC,EAAQ5C,KACd4C,EAAQ5C,GAAS,IAGlB,IAAM6C,EAAarI,OAAOC,KAAMsF,EAAO+C,SAAUrC,QAChD,SAAEC,EAAKqC,GAXW,IAAEC,EAgBnB,OAJAtC,EAAKqC,IAZcC,EAalBjD,EAAO+C,QAASC,GAbwC,KAcxDhD,EAAOkD,WAAYF,GAdwBC,EAAO,IAgB5CtC,IAER,IAGDkC,EAAQ5C,GAAOZ,KAAMyD,MAGtBrI,OAAO0I,QAASN,GAAS9C,SAAS,YAA0B,IAAD,mBAArBE,EAAqB,KAAfmD,EAAe,KACpDrF,EAAOqF,EAAQjI,OACrB2E,EAAQG,GAAS,CAAEA,QAGnBxF,OAAOC,KAAM0I,EAAS,IAAMrD,SAAS,SAAEiD,GAEtClD,EAAQG,GAAQ+C,GAAWI,EAAQ1C,QAClC,SAAE2C,EAAGC,GAAL,OAAcD,EAAIC,EAAKN,KACvB,GAGDlD,EAAQG,GAAQ+C,IAAYjF,EAE5B+B,EAAQG,GAAQ+C,GACfO,KAAKC,MAAkC,IAA3B1D,EAAQG,GAAQ+C,IAAmB,UAIlDzD,QAAQC,IAAKsB,KAAKC,UAAWjB,IAC7B1G,KAAKE,SAAU,CAAEmK,UAAWhJ,OAAO+F,OAAQV,O,+BAG5C,WAAqB,IAAD,OACnBpB,MAAO,2BAA4B,CAClCC,QAAS,CACR,eAAgB,mBAChBC,OAAQ,sBAGRC,MAAM,SAAEC,GAAF,OAAgBA,EAASC,UAC/BF,MAAM,SAAEG,GACR,EAAK1F,SAAU,CAAEsJ,QAAS5D,IAC1B,EAAK0E,sBAELpE,MAAOC,QAAQC,KAEjBtC,IAAQC,SAAU,c,gCAGnB,WACC,IAAMwC,EAAQvG,KAAKN,MAAM6G,MAAMe,QAC9B,SAAEC,EAAKC,GAIN,OAHAD,EAAIzG,QAAU0G,EAAK3G,UAAUC,OAAS0G,EAAK3G,UAAUE,OACrDwG,EAAIE,WAAaD,EAAK3G,UAAUwB,MAChCkF,EAAIlF,QACGkF,IAER,CAAEzG,OAAQ,EAAG2G,UAAW,EAAGpF,MAAO,IAEnC8D,QAAQC,IAAKsB,KAAKC,UAAWpB,IAE7B,IAAMqB,EAAgBrB,EAAMzF,OAASyF,EAAMkB,UAAc,IACzD,OACC,8BACC,2CACaG,EADb,oBAC6C,IAC1CrB,EAAMkB,UAFT,gBAEmClB,EAAMlE,a,+BAM5C,WAEC,OADoBrC,KAAKN,MAAM8G,YACZjF,KAAK,SAAEsG,EAAM3F,GAAR,OACvB,gCACG2F,EAAKC,SADR,IACqBD,EAAKjH,KAD1B,IACmCiH,EAAKE,MAAMC,cAAiB,IAC5DH,EAAKE,MAAME,YAAYC,UAAW,MAF1BhG,Q,yBAoBb,WACC,OACC,8BACC,eAACiG,EAAA,EAAD,CACCC,MAAQ,KACRC,OAAS,IACT/B,KAAOtG,KAAKN,MAAM2K,UAClB/B,OAAS,CAAEC,IAAK,EAAGC,MAAO,GAAIC,OAAQ,EAAGC,KAAM,IAJhD,UAMC,cAACC,EAAA,EAAD,CAAeC,OAAO,UACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,UAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,UACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,SACRF,OAAO,OACPQ,mBAAoB,IAErB,cAACF,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,uBACRF,OAAO,QACPQ,mBAAoB,IAErB,cAACF,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,OACRF,OAAO,MACPQ,mBAAoB,IAGrB,cAACF,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,QACRF,OAAO,OACPQ,mBAAoB,IAErB,cAACF,EAAA,EAAD,CACCC,KAAK,WACLL,QAAQ,eACRF,OAAO,UACPQ,mBAAoB,W,oBAOzB,WACC,OACC,gCACC,gDACEpJ,KAAKuK,qB,GA/K8BzF,IAAMC,WCV1ByF,E,4JACpB,WACC,OACC,gCACC,2CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANiC1F,IAAMC,WCO3CjB,IAAQ2G,WADY,kBAGpB,IAAMC,EAAe,SAAEC,EAAiBC,GACvCD,EAAiBC,GACjBC,SAASC,KAAOF,GAGjB,SAASG,EAAT,GAAsD,IAAnCC,EAAkC,EAAlCA,aAAcL,EAAoB,EAApBA,gBAChC,OACC,cAACM,EAAA,EAAD,CAAQtJ,QAAQ,OAAOuJ,OAAO,KAAKpJ,UAAU,cAA7C,SACC,eAACqJ,EAAA,EAAD,CAAWC,OAAK,EAACtJ,UAAU,8BAA3B,UACC,cAACmJ,EAAA,EAAOI,MAAR,CAAc1H,KAAK,IAAnB,4CAGA,cAACsH,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,cAACN,EAAA,EAAOO,SAAR,CAAiBtJ,GAAG,mBAApB,SACC,eAACuJ,EAAA,EAAD,CAAKC,UAAYV,EAAelJ,UAAU,UAA1C,UACC,cAAC2J,EAAA,EAAIE,KAAL,CACChI,KAAK,WACLiI,SAAW,SAAEhB,GAAF,OACVF,EAAcC,EAAiBC,IAHjC,4BAQA,cAACa,EAAA,EAAIE,KAAL,CACChI,KAAK,WACLiI,SAAW,SAAEhB,GAAF,OACVF,EAAcC,EAAiBC,IAHjC,+BAyDSiB,MA1Cf,WACC,MAA0CC,mBAAU,YAApD,mBAAQd,EAAR,KAAsBL,EAAtB,KASA,OAPCE,SAASC,MACT,CAAE,WAAY,YAAa9E,SAAU6E,SAASC,OAC9CE,IAAiBH,SAASC,MAE1BH,EAAiBE,SAASC,MAI1B,eAACK,EAAA,EAAD,CAAWC,OAAK,EAACtJ,UAAU,MAA3B,UACC,sBAAKA,UAAU,cAAf,UACC,cAACiJ,EAAD,CACCC,aAAeA,EACfL,gBAAkBA,IAEA,aAAjBK,EAA8B,cAAC,EAAD,IAAc,cAAC,EAAD,OAE/C,wBAAQlJ,UAAU,aAAlB,SACC,gCACC,mBACC8B,OAAO,SACPD,KAAK,qDACLE,IAAI,aAHL,kBAOE,WACF,mBACCD,OAAO,SACPD,KAAK,4DACLE,IAAI,aAHL,8BC1ELkI,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAgB,W","file":"static/js/main.1276762f.chunk.js","sourcesContent":["import { Table, Badge, Button } from 'react-bootstrap';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaCheck,\n\tfaCodeBranch,\n\tfaQuestion,\n\tfaTimes,\n} from '@fortawesome/free-solid-svg-icons';\nimport ReactGA from 'react-ga';\n\nexport default class ReportsTable extends React.Component {\n\tstate = {\n\t\treports: this.props.reports,\n\t\tsort: { by: 'lastUpdate', isAsc: false },\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.sortTable( this.state.sort.by, this.state.sort.isAsc );\n\t}\n\n\tsortTable( by, isAsc ) {\n\t\tthis.setState( { sort: { by, isAsc } } );\n\n\t\tswitch ( by ) {\n\t\t\tcase 'name':\n\t\t\t\treturn this.sortByName( isAsc );\n\t\t\tcase 'lastUpdate':\n\t\t\t\treturn this.sortByDate( isAsc );\n\t\t\tcase 'statistic':\n\t\t\t\treturn this.sortByStatus( isAsc );\n\t\t}\n\t}\n\n\tsortByDate( isSortAsc ) {\n\t\treturn this.state.reports.sort( ( r1, r2 ) => {\n\t\t\tif ( isSortAsc ) {\n\t\t\t\treturn (\n\t\t\t\t\tDate.parse( r1.lastUpdate ) - Date.parse( r2.lastUpdate )\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Date.parse( r2.lastUpdate ) - Date.parse( r1.lastUpdate );\n\t\t} );\n\t}\n\n\tsortByName( isSortAsc ) {\n\t\treturn this.state.reports.sort( ( r1, r2 ) =>\n\t\t\tisSortAsc ? r1.name - r2.name : r2.name - r1.name\n\t\t);\n\t}\n\n\tsortByStatus( isSortAsc ) {\n\t\treturn this.state.reports.sort( ( r1, r2 ) => {\n\t\t\tif ( isSortAsc ) {\n\t\t\t\treturn (\n\t\t\t\t\tr1.statistic.failed +\n\t\t\t\t\tr1.statistic.broken -\n\t\t\t\t\t( r2.statistic.failed + r2.statistic.broken )\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tr2.statistic.failed +\n\t\t\t\tr2.statistic.broken -\n\t\t\t\t( r1.statistic.failed + r1.statistic.broken )\n\t\t\t);\n\t\t} );\n\t}\n\n\tgetTableHeader() {\n\t\tconst head = {\n\t\t\tname: 'report id',\n\t\t\tstatistic: 'no of failures',\n\t\t\tlastUpdate: 'most recent',\n\t\t};\n\n\t\tconst klass = this.state.sort.isAsc ? 'sort-by-asc' : 'sort-by-desc';\n\t\tlet sortButtons;\n\n\t\tif ( this.props.options.sortButtons ) {\n\t\t\tsortButtons = Object.keys( head ).map( ( key, index ) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"dark\"\n\t\t\t\t\t\tkey={ index }\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tthis.sortTable( key, ! this.state.sort.isAsc );\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ head[ key ].toUpperCase() }\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\tthis.state.sort.by === key ? klass : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Button>\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tlet reportCount;\n\t\tif ( this.props.reportCount ) {\n\t\t\treportCount = `${ this.state.reports.length } reports`;\n\t\t}\n\n\t\treturn (\n\t\t\t<thead>\n\t\t\t\t<tr className={ 'headerRow' }>\n\t\t\t\t\t<td colSpan=\"3\" className={ 'sortButtons' }>\n\t\t\t\t\t\t<div className={ 'd-flex justify-content-between' }>\n\t\t\t\t\t\t\t<div>{ reportCount }</div>\n\t\t\t\t\t\t\t<div>{ sortButtons }</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t);\n\t}\n\n\tgetReportRow( report, id ) {\n\t\tconst { statistic, metadata } = report; //destructuring\n\t\tconst isFailed =\n\t\t\tstatistic.total !== statistic.passed + statistic.skipped;\n\t\treturn (\n\t\t\t<tr key={ id }>\n\t\t\t\t<td className={ 'reportNameCell' }>\n\t\t\t\t\t{ this.getReportLinkCell(\n\t\t\t\t\t\treport,\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\tisFailed,\n\t\t\t\t\t\tstatistic.total\n\t\t\t\t\t) }\n\t\t\t\t</td>\n\t\t\t\t<td>{ this.getTestResultsCell( statistic ) }</td>\n\t\t\t\t<td>{ this.getMetadataCell( report ) }</td>\n\t\t\t</tr>\n\t\t);\n\t}\n\n\tgetReportLinkCell( report, metadata, isFailed, totalTests ) {\n\t\tconst linkUrl = `https://automattic.github.io/jetpack-e2e-reports/${ report.name }/report/`;\n\n\t\tconst reportKey = report.name;\n\t\tlet reportTitle = report.name;\n\n\t\tif ( metadata.pr_title ) {\n\t\t\tconst prNumber = `(#${ metadata.pr_number })`;\n\t\t\treportTitle = `${ metadata.pr_title } ${ prNumber }`;\n\t\t}\n\n\t\tconst branchUrl = `https://github.com/Automattic/jetpack/tree/${ metadata.branch }`;\n\t\tconst prUrl = `https://github.com/Automattic/jetpack/pull/${ metadata.pr_number }`;\n\n\t\tlet statusIcon = faQuestion;\n\t\tlet statusClassName = 'warning';\n\t\tif ( totalTests > 0 ) {\n\t\t\tstatusIcon = isFailed ? faTimes : faCheck;\n\t\t\tstatusClassName = isFailed ? 'failed' : 'passed';\n\t\t}\n\n\t\treturn (\n\t\t\t<ul className={ 'list-unstyled' }>\n\t\t\t\t<li>\n\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\tclassName={ statusClassName }\n\t\t\t\t\t\ticon={ statusIcon }\n\t\t\t\t\t/>\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={ linkUrl }\n\t\t\t\t\t\tclassName=\"report-link\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t\tonClick={ () => ReactGA.pageview( '/' + report.name ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ reportTitle }\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<small>\n\t\t\t\t\t\t#{ reportKey } { ' • ' }\n\t\t\t\t\t\t<FontAwesomeIcon icon={ faCodeBranch } />{ ' ' }\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={ branchUrl }\n\t\t\t\t\t\t\ttarget={ '_blank' }\n\t\t\t\t\t\t\tclassName={ 'report-link' }\n\t\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ metadata.branch }\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t{ metadata.pr_number ? ' • ' : '' }\n\t\t\t\t\t\t{ metadata.pr_number && (\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref={ prUrl }\n\t\t\t\t\t\t\t\ttarget={ '_blank' }\n\t\t\t\t\t\t\t\tclassName={ 'report-link' }\n\t\t\t\t\t\t\t\trel={ 'noreferrer' }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tPR { metadata.pr_number }\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</small>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t);\n\t}\n\n\tgetTestResultsCell( statistic ) {\n\t\tconst counts = [ 'failed', 'passed', 'total' ].map( ( label, id ) => {\n\t\t\tconst count =\n\t\t\t\tlabel === 'failed'\n\t\t\t\t\t? statistic[ label ] + statistic.broken\n\t\t\t\t\t: statistic[ label ];\n\t\t\treturn (\n\t\t\t\t<Badge key={ id } className={ `label label-status-${ label }` }>\n\t\t\t\t\t{ label } { count }\n\t\t\t\t</Badge>\n\t\t\t);\n\t\t} );\n\n\t\treturn <div>{ counts }</div>;\n\t}\n\n\tgetMetadataCell( report ) {\n\t\tconst runUrl = `https://github.com/Automattic/jetpack/actions/runs/${ report.metadata.run_id }`;\n\t\treturn (\n\t\t\t<ul className={ 'list-unstyled' }>\n\t\t\t\t<li>\n\t\t\t\t\t<small>\n\t\t\t\t\t\tlast update:{ ' ' }\n\t\t\t\t\t\t{ new Date(\n\t\t\t\t\t\t\tDate.parse( report.lastUpdate )\n\t\t\t\t\t\t).toLocaleString() }\n\t\t\t\t\t</small>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<small>\n\t\t\t\t\t\tlast run id:{ ' ' }\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={ runUrl }\n\t\t\t\t\t\t\ttarget={ '_blank' }\n\t\t\t\t\t\t\tclassName={ 'report-link' }\n\t\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ report.metadata.run_id }\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</small>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Table\n\t\t\t\thover\n\t\t\t\tresponsive=\"sm\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"dark\"\n\t\t\t\tclassName=\"reportsTable\"\n\t\t\t>\n\t\t\t\t{ this.getTableHeader() }\n\t\t\t\t<tbody>\n\t\t\t\t\t{ this.state.reports.map( ( report, id ) =>\n\t\t\t\t\t\tthis.getReportRow( report, id )\n\t\t\t\t\t) }\n\t\t\t\t</tbody>\n\t\t\t\t<tfoot>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colSpan={ 3 } />\n\t\t\t\t\t</tr>\n\t\t\t\t</tfoot>\n\t\t\t</Table>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport configData from './config.json';\nimport ReportsTable from './components/ReportsTable';\n\nexport default class Reports extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\treports: [],\n\t\t\tpinnedReports: [],\n\t\t\tdocsSize: undefined,\n\t\t\treportsCount: undefined,\n\t\t\tisDataFetched: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch( './data/summary.json', {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t} )\n\t\t\t.then( ( response ) => response.json() )\n\t\t\t.then( ( jsonData ) => {\n\t\t\t\tconst prReports = { reports: [] };\n\t\t\t\tconst pinnedReports = { reports: [] };\n\n\t\t\t\tfor ( const report of jsonData.reports ) {\n\t\t\t\t\tif ( configData.permanent.includes( report.name ) ) {\n\t\t\t\t\t\tpinnedReports.reports.push( report );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprReports.reports.push( report );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setState( {\n\t\t\t\t\treports: prReports.reports,\n\t\t\t\t\tpinnedReports: pinnedReports.reports,\n\t\t\t\t\tdocsSize: jsonData.docsSize,\n\t\t\t\t\treportsCount: jsonData.reportsCount,\n\t\t\t\t\tisDataFetched: true,\n\t\t\t\t} );\n\t\t\t} )\n\t\t\t.catch( console.log );\n\t\tReactGA.pageview( '/reports' );\n\t}\n\n\trender() {\n\t\tif ( ! this.state.isDataFetched ) return null;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className={ 'reports-header' }>\n\t\t\t\t\t{ this.state.reportsCount } reports\n\t\t\t\t</div>\n\t\t\t\t<ReportsTable\n\t\t\t\t\treports={ this.state.pinnedReports }\n\t\t\t\t\toptions={ {\n\t\t\t\t\t\treportCount: false,\n\t\t\t\t\t\tsortButtons: false,\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t\t<ReportsTable\n\t\t\t\t\treports={ this.state.reports }\n\t\t\t\t\toptions={ {\n\t\t\t\t\t\treportCount: false,\n\t\t\t\t\t\tsortButtons: true,\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t\t<small className={ 'footnote' }>\n\t\t\t\t\tdocs size: { this.state.docsSize }\n\t\t\t\t</small>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\n\nimport {\n\tLineChart,\n\tLine,\n\tTooltip,\n\tCartesianGrid,\n\tXAxis,\n\tYAxis,\n\tLegend,\n} from 'recharts';\n\nexport default class E2EMetrics extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tdata: { reports: [] },\n\t\t\tstats: [],\n\t\t\tfailedTests: [],\n\t\t\tstatsChartData: [],\n\t\t};\n\t}\n\n\tparseStats() {\n\t\tconst result = {};\n\n\t\tthis.state.stats.forEach( ( record ) => {\n\t\t\tconst dateObj = new Date( record.time.start );\n\t\t\tconst date = dateObj.toISOString().split( 'T' )[ 0 ];\n\n\t\t\tif ( ! result[ date ] ) {\n\t\t\t\tresult[ date ] = Object.assign( {}, record.statistic );\n\t\t\t\tresult[ date ].failed += record.statistic.broken;\n\n\t\t\t\tresult[ date ].date = date;\n\t\t\t} else {\n\t\t\t\tresult[ date ].failed +=\n\t\t\t\t\trecord.statistic.failed + record.statistic.broken;\n\t\t\t\tresult[ date ].skipped += record.statistic.skipped;\n\t\t\t\tresult[ date ].passed += record.statistic.passed;\n\t\t\t\tresult[ date ].unknown += record.statistic.unknown;\n\t\t\t\tresult[ date ].total += record.statistic.total;\n\t\t\t}\n\t\t} );\n\n\t\tthis.setState( { statsChartData: Object.values( result ) } );\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch( './data/metrics.json', {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t} )\n\t\t\t.then( ( response ) => response.json() )\n\t\t\t.then( ( jsonData ) => {\n\t\t\t\tthis.setState( { stats: jsonData.stats } );\n\t\t\t\tthis.setState( { failedTests: jsonData.failedTests } );\n\t\t\t\tthis.parseStats();\n\t\t\t} )\n\t\t\t.catch( console.log );\n\n\t\tReactGA.pageview( '#metrics' );\n\t}\n\n\trenderStatsSummary() {\n\t\tconst stats = this.state.stats.reduce(\n\t\t\t( acc, stat ) => {\n\t\t\t\tacc.failed += stat.statistic.failed + stat.statistic.broken;\n\t\t\t\tacc.testCases += stat.statistic.total;\n\t\t\t\tacc.total++;\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t{ failed: 0, testCases: 0, total: 0 }\n\t\t);\n\t\tconsole.log( JSON.stringify( stats ) );\n\n\t\tconst failureRate = ( stats.failed / stats.testCases ) * 100;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tFailures: { failureRate }% Test case runs:{ ' ' }\n\t\t\t\t\t{ stats.testCases } Total runs: { stats.total }\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderFailedTests() {\n\t\tconst failedTests = this.state.failedTests;\n\t\treturn failedTests.map( ( test, id ) => (\n\t\t\t<div key={ id }>\n\t\t\t\t{ test.fileName } { test.name } { test.error.statusMessage }{ ' ' }\n\t\t\t\t{ test.error.statusTrace.substring( 20 ) }\n\t\t\t</div>\n\t\t) );\n\t}\n\n\trenderSummaryChart() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<LineChart\n\t\t\t\t\twidth={ 1200 }\n\t\t\t\t\theight={ 300 }\n\t\t\t\t\tdata={ this.state.statsChartData }\n\t\t\t\t\tmargin={ { top: 5, right: 60, bottom: 5, left: 60 } }\n\t\t\t\t>\n\t\t\t\t\t<CartesianGrid stroke=\"white\" />\n\t\t\t\t\t<XAxis dataKey=\"date\" stroke=\"white\" />\n\t\t\t\t\t<YAxis stroke=\"white\" />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Legend />\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"passed\"\n\t\t\t\t\t\tstroke=\"#8884d8\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"failed\"\n\t\t\t\t\t\tstroke=\"#82ca9d\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t</LineChart>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.renderStatsSummary() }\n\t\t\t\t{ this.renderSummaryChart() }\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\n\nimport {\n\tLineChart,\n\tLine,\n\tTooltip,\n\tCartesianGrid,\n\tXAxis,\n\tYAxis,\n\tLegend,\n} from 'recharts';\n\nexport default class PerfMetrics extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\trawData: [],\n\t\t};\n\t}\n\n\tprepareChartData() {\n\t\tconst result = {};\n\n\t\tconst calcPercent = ( base, comp ) => ( comp / base - 1 ) * 100;\n\n\t\tconst byDate = {};\n\t\tthis.state.rawData.forEach( ( record ) => {\n\t\t\tlet date = new Date( record.date );\n\t\t\tdate = date.toISOString().split( 'T' )[ 0 ];\n\t\t\tif ( ! byDate[ date ] ) {\n\t\t\t\tbyDate[ date ] = [];\n\t\t\t}\n\n\t\t\tconst percentage = Object.keys( record.baseAvg ).reduce(\n\t\t\t\t( acc, metric ) => {\n\t\t\t\t\tacc[ metric ] = calcPercent(\n\t\t\t\t\t\trecord.baseAvg[ metric ],\n\t\t\t\t\t\trecord.jetpackAvg[ metric ]\n\t\t\t\t\t);\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t);\n\n\t\t\tbyDate[ date ].push( percentage );\n\t\t} );\n\n\t\tObject.entries( byDate ).forEach( ( [ date, recArry ] ) => {\n\t\t\tconst size = recArry.length;\n\t\t\tresult[ date ] = { date };\n\n\t\t\t// looping through all the keys, and calculating average for specific day\n\t\t\tObject.keys( recArry[ 0 ] ).forEach( ( metric ) => {\n\t\t\t\t// sum\n\t\t\t\tresult[ date ][ metric ] = recArry.reduce(\n\t\t\t\t\t( a, rec ) => a + rec[ metric ],\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\t// calculating average\n\t\t\t\tresult[ date ][ metric ] /= size;\n\t\t\t\t// rounding\n\t\t\t\tresult[ date ][ metric ] =\n\t\t\t\t\tMath.round( result[ date ][ metric ] * 100 ) / 100;\n\t\t\t} );\n\t\t} );\n\n\t\tconsole.log( JSON.stringify( result ) );\n\t\tthis.setState( { chartData: Object.values( result ) } );\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch( './data/perf-metrics.json', {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t} )\n\t\t\t.then( ( response ) => response.json() )\n\t\t\t.then( ( jsonData ) => {\n\t\t\t\tthis.setState( { rawData: jsonData } );\n\t\t\t\tthis.prepareChartData();\n\t\t\t} )\n\t\t\t.catch( console.log );\n\n\t\tReactGA.pageview( '#metrics' );\n\t}\n\n\trenderStatsSummary() {\n\t\tconst stats = this.state.stats.reduce(\n\t\t\t( acc, stat ) => {\n\t\t\t\tacc.failed += stat.statistic.failed + stat.statistic.broken;\n\t\t\t\tacc.testCases += stat.statistic.total;\n\t\t\t\tacc.total++;\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t{ failed: 0, testCases: 0, total: 0 }\n\t\t);\n\t\tconsole.log( JSON.stringify( stats ) );\n\n\t\tconst failureRate = ( stats.failed / stats.testCases ) * 100;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\tFailures: { failureRate }% Test case runs:{ ' ' }\n\t\t\t\t\t{ stats.testCases } Total runs: { stats.total }\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderFailedTests() {\n\t\tconst failedTests = this.state.failedTests;\n\t\treturn failedTests.map( ( test, id ) => (\n\t\t\t<div key={ id }>\n\t\t\t\t{ test.fileName } { test.name } { test.error.statusMessage }{ ' ' }\n\t\t\t\t{ test.error.statusTrace.substring( 20 ) }\n\t\t\t</div>\n\t\t) );\n\t}\n\n\t// const {\n\t// \tserverResponse,\n\t// \tfirstPaint,\n\t// \tdomContentLoaded,\n\t// \tloaded,\n\t// \tfirstContentfulPaint,\n\t// \tfirstBlock,\n\t// \ttype,\n\t// \tfocus,\n\t// \tinserterOpen,\n\t// \tinserterHover,\n\t// \tinserterSearch,\n\t// } = JSON.parse( results );\n\trenderChart() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<LineChart\n\t\t\t\t\twidth={ 1200 }\n\t\t\t\t\theight={ 300 }\n\t\t\t\t\tdata={ this.state.chartData }\n\t\t\t\t\tmargin={ { top: 5, right: 60, bottom: 5, left: 60 } }\n\t\t\t\t>\n\t\t\t\t\t<CartesianGrid stroke=\"white\" />\n\t\t\t\t\t<XAxis dataKey=\"date\" stroke=\"white\" />\n\t\t\t\t\t<YAxis stroke=\"white\" />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Legend />\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"loaded\"\n\t\t\t\t\t\tstroke=\"blue\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"firstContentfulPaint\"\n\t\t\t\t\t\tstroke=\"green\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"type\"\n\t\t\t\t\t\tstroke=\"red\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"focus\"\n\t\t\t\t\t\tstroke=\"grey\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"inserterOpen\"\n\t\t\t\t\t\tstroke=\"magenta\"\n\t\t\t\t\t\tisAnimationActive={ false }\n\t\t\t\t\t/>\n\t\t\t\t</LineChart>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span>PERF METRICS</span>\n\t\t\t\t{ this.renderChart() }\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport E2EMetrics from './components/E2EMetrics';\nimport PerfMetrics from './components/PerfMetrics';\nexport default class Metrics extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span>METRICS</span>\n\t\t\t\t<E2EMetrics />\n\t\t\t\t<PerfMetrics />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { useState } from 'react';\nimport ReactGA from 'react-ga';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Navbar, Container, Nav } from 'react-bootstrap';\nimport Reports from './Reports';\nimport Metrics from './Metrics';\n\nconst TRACKING_ID = 'UA-208890082-1';\nReactGA.initialize( TRACKING_ID );\n\nconst linkOnSelect = ( setActiveNavbar, navbar ) => {\n\tsetActiveNavbar( navbar );\n\tlocation.hash = navbar;\n};\n\nfunction NavBar( { activeNavbar, setActiveNavbar } ) {\n\treturn (\n\t\t<Navbar variant=\"dark\" expand=\"md\" className=\"app-nav-bar\">\n\t\t\t<Container fluid className=\"app-nav-bar-inner-container\">\n\t\t\t\t<Navbar.Brand href=\"#\">\n\t\t\t\t\tJetpack test results dashboard\n\t\t\t\t</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t<Nav activeKey={ activeNavbar } className=\"ml-auto\">\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\thref=\"#reports\"\n\t\t\t\t\t\t\tonSelect={ ( navbar ) =>\n\t\t\t\t\t\t\t\tlinkOnSelect( setActiveNavbar, navbar )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRecent reports\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\thref=\"#metrics\"\n\t\t\t\t\t\t\tonSelect={ ( navbar ) =>\n\t\t\t\t\t\t\t\tlinkOnSelect( setActiveNavbar, navbar )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMetrics\n\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Container>\n\t\t</Navbar>\n\t);\n}\n\nfunction App() {\n\tconst [ activeNavbar, setActiveNavbar ] = useState( '#reports' );\n\tif (\n\t\tlocation.hash &&\n\t\t[ '#reports', '#metrics' ].includes( location.hash ) &&\n\t\tactiveNavbar !== location.hash\n\t) {\n\t\tsetActiveNavbar( location.hash );\n\t}\n\n\treturn (\n\t\t<Container fluid className=\"App\">\n\t\t\t<div className=\"App-content\">\n\t\t\t\t<NavBar\n\t\t\t\t\tactiveNavbar={ activeNavbar }\n\t\t\t\t\tsetActiveNavbar={ setActiveNavbar }\n\t\t\t\t/>\n\t\t\t\t{ activeNavbar === '#reports' ? <Reports /> : <Metrics /> }\n\t\t\t</div>\n\t\t\t<footer className=\"App-footer\">\n\t\t\t\t<div>\n\t\t\t\t\t<a\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\thref=\"https://github.com/Automattic/jetpack-e2e-reports/\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tCode\n\t\t\t\t\t</a>\n\t\t\t\t\t{ ' • ' }\n\t\t\t\t\t<a\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\thref=\"https://github.com/Automattic/jetpack-e2e-reports/actions\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tActions\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById( 'root' )\n);\n"],"sourceRoot":""}