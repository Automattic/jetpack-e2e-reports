{
  "uid" : "46581ef68b86a6d9",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1624471172313,
    "stop" : 1624471186270,
    "duration" : 13957
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a MailChimp block&quot;,\n    async () =&gt; {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(&quot;Can connect to a MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "54322287e7b05872",
      "name" : "1624471166723_beforeAll___Paid_blocks.webm",
      "source" : "54322287e7b05872.webm",
      "type" : "video/webm",
      "size" : 1154801
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cf3245bc112f8cb0",
      "name" : "1624471131929_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "cf3245bc112f8cb0.webm",
      "type" : "video/webm",
      "size" : 289687
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2a64ada570003038",
      "name" : "1624471185932_Paid_blocks___MailChimp_Block.webm",
      "source" : "2a64ada570003038.webm",
      "type" : "video/webm",
      "size" : 592675
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "9f014f3b33d50c6a",
      "status" : "passed",
      "time" : {
        "start" : 1624469735569,
        "stop" : 1624469755725,
        "duration" : 20156
      }
    }, {
      "uid" : "bbccc6d87b655fe7",
      "status" : "passed",
      "time" : {
        "start" : 1624468411480,
        "stop" : 1624468425764,
        "duration" : 14284
      }
    }, {
      "uid" : "f8157a1f1efeb15c",
      "status" : "passed",
      "time" : {
        "start" : 1624424002474,
        "stop" : 1624424018078,
        "duration" : 15604
      }
    }, {
      "uid" : "17384590f9e4444e",
      "status" : "passed",
      "time" : {
        "start" : 1624422169781,
        "stop" : 1624422186302,
        "duration" : 16521
      }
    }, {
      "uid" : "f4261de839323aea",
      "status" : "passed",
      "time" : {
        "start" : 1624417406010,
        "stop" : 1624417419587,
        "duration" : 13577
      }
    }, {
      "uid" : "f66f217e426ee84c",
      "status" : "passed",
      "time" : {
        "start" : 1624412537987,
        "stop" : 1624412552504,
        "duration" : 14517
      }
    }, {
      "uid" : "dac94c4a2cb3f4e4",
      "status" : "passed",
      "time" : {
        "start" : 1624410598145,
        "stop" : 1624410613173,
        "duration" : 15028
      }
    }, {
      "uid" : "d315bc030dc91fa0",
      "status" : "passed",
      "time" : {
        "start" : 1624409597741,
        "stop" : 1624409613054,
        "duration" : 15313
      }
    }, {
      "uid" : "a6fdb755024b04f8",
      "status" : "passed",
      "time" : {
        "start" : 1624408213466,
        "stop" : 1624408227919,
        "duration" : 14453
      }
    }, {
      "uid" : "7c7bf7858d04a5ec",
      "status" : "passed",
      "time" : {
        "start" : 1624403770951,
        "stop" : 1624403786033,
        "duration" : 15082
      }
    }, {
      "uid" : "130dc2d7695cde8a",
      "status" : "passed",
      "time" : {
        "start" : 1624399002698,
        "stop" : 1624399042132,
        "duration" : 39434
      }
    }, {
      "uid" : "2586630bc2b0635c",
      "status" : "passed",
      "time" : {
        "start" : 1624337264478,
        "stop" : 1624337286316,
        "duration" : 21838
      }
    }, {
      "uid" : "19e089c4be49ae3f",
      "status" : "passed",
      "time" : {
        "start" : 1624335314137,
        "stop" : 1624335332105,
        "duration" : 17968
      }
    }, {
      "uid" : "5ea0c7930e4cf96",
      "status" : "broken",
      "statusDetails" : "Error",
      "time" : {
        "start" : 1624251039049,
        "stop" : 1624251185421,
        "duration" : 146372
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "46581ef68b86a6d9.json",
  "parameterValues" : [ ]
}