{
  "uid" : "87901484b823ed75",
  "name" : "WordAds block",
  "fullName" : "WordAds block",
  "historyId" : "18efccdb8f3fb33e445e77a8ef2cffa3",
  "time" : {
    "start" : 1624408239124,
    "stop" : 1624408243523,
    "duration" : 4399
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a WordAds block\",\n    async () => {\n      await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n      blockId = await blockEditor.insertBlock(\n        _wordAds.default.name(),\n        _wordAds.default.title()\n      );\n      await blockEditor.selectPostTitle();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can switch to Wide Skyscraper ad format\",\n    async () => {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that WordAds block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a WordAds block&quot;,\n    async () =&gt; {\n      await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n      blockId = await blockEditor.insertBlock(\n        _wordAds.default.name(),\n        _wordAds.default.title()\n      );\n      await blockEditor.selectPostTitle();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can switch to Wide Skyscraper ad format&quot;,\n    async () =&gt; {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that WordAds block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "31a4185e171d65e7",
      "name" : "1624408208235_beforeAll___Paid_blocks.webm",
      "source" : "31a4185e171d65e7.webm",
      "type" : "video/webm",
      "size" : 1135305
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a8a34ac1e0f60bb9",
      "name" : "1624408174300_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "a8a34ac1e0f60bb9.webm",
      "type" : "video/webm",
      "size" : 404225
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a WordAds block\",\n    async () => {\n      await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n      blockId = await blockEditor.insertBlock(\n        _wordAds.default.name(),\n        _wordAds.default.title()\n      );\n      await blockEditor.selectPostTitle();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can switch to Wide Skyscraper ad format\",\n    async () => {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that WordAds block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "451b55f311cf5cdd",
      "name" : "1624408243061_Paid_blocks___WordAds_block.webm",
      "source" : "451b55f311cf5cdd.webm",
      "type" : "video/webm",
      "size" : 189844
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "b673a6f5b82534c9",
      "status" : "passed",
      "time" : {
        "start" : 1624403797557,
        "stop" : 1624403802682,
        "duration" : 5125
      }
    }, {
      "uid" : "4288f6b0fb7856f0",
      "status" : "passed",
      "time" : {
        "start" : 1624399054784,
        "stop" : 1624399060418,
        "duration" : 5634
      }
    }, {
      "uid" : "5b831a922b781ca9",
      "status" : "passed",
      "time" : {
        "start" : 1624337304598,
        "stop" : 1624337311627,
        "duration" : 7029
      }
    }, {
      "uid" : "82f2acea7d7c41ad",
      "status" : "passed",
      "time" : {
        "start" : 1624335346919,
        "stop" : 1624335352703,
        "duration" : 5784
      }
    }, {
      "uid" : "d171f4afc99bcdc7",
      "status" : "passed",
      "time" : {
        "start" : 1624251209570,
        "stop" : 1624251218361,
        "duration" : 8791
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "87901484b823ed75.json",
  "parameterValues" : [ ]
}