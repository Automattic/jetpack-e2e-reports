{
  "uid" : "33e7dc7831228a42",
  "name" : "Eventbrite block",
  "fullName" : "Eventbrite block",
  "historyId" : "0b4a15ebb314cfb213eb3e305bfce89d",
  "time" : {
    "start" : 1624489360754,
    "stop" : 1624489371619,
    "duration" : 10865
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const eventId = &quot;112691417062&quot;;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Eventbrite block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Eventbrite block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Eventbrite block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e904e2cd89c905ec",
      "name" : "1624489347565_beforeAll___Free_blocks.webm",
      "source" : "e904e2cd89c905ec.webm",
      "type" : "video/webm",
      "size" : 520453
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b65ba1092df80719",
      "name" : "1624489327891_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "b65ba1092df80719.webm",
      "type" : "video/webm",
      "size" : 262391
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5e70cee80b73dd6f",
      "name" : "1624489371370_Free_blocks___Eventbrite_block.webm",
      "source" : "5e70cee80b73dd6f.webm",
      "type" : "video/webm",
      "size" : 402838
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "59b3b763a9671dec",
      "status" : "passed",
      "time" : {
        "start" : 1624484694764,
        "stop" : 1624484705070,
        "duration" : 10306
      }
    }, {
      "uid" : "f3751c8b9f1fd354",
      "status" : "broken",
      "statusDetails" : "TimeoutError",
      "time" : {
        "start" : 1624483277697,
        "stop" : 1624483277764,
        "duration" : 67
      }
    }, {
      "uid" : "d2a966b79ac14f5a",
      "status" : "passed",
      "time" : {
        "start" : 1624481904472,
        "stop" : 1624481911082,
        "duration" : 6610
      }
    }, {
      "uid" : "991bbb860a64659b",
      "status" : "passed",
      "time" : {
        "start" : 1624471245317,
        "stop" : 1624471254973,
        "duration" : 9656
      }
    }, {
      "uid" : "24a19bddeccb29e1",
      "status" : "passed",
      "time" : {
        "start" : 1624469828317,
        "stop" : 1624469838331,
        "duration" : 10014
      }
    }, {
      "uid" : "1c216a56ff8fa966",
      "status" : "passed",
      "time" : {
        "start" : 1624468483473,
        "stop" : 1624468493950,
        "duration" : 10477
      }
    }, {
      "uid" : "4757040897d751d9",
      "status" : "passed",
      "time" : {
        "start" : 1624424086867,
        "stop" : 1624424095661,
        "duration" : 8794
      }
    }, {
      "uid" : "a08e85d5bfe8eecf",
      "status" : "passed",
      "time" : {
        "start" : 1624422252474,
        "stop" : 1624422260948,
        "duration" : 8474
      }
    }, {
      "uid" : "28afe08d4cde12d7",
      "status" : "passed",
      "time" : {
        "start" : 1624417474916,
        "stop" : 1624417482390,
        "duration" : 7474
      }
    }, {
      "uid" : "f67f84fb1313becf",
      "status" : "passed",
      "time" : {
        "start" : 1624412608127,
        "stop" : 1624412618365,
        "duration" : 10238
      }
    }, {
      "uid" : "64aa57ec143eae94",
      "status" : "passed",
      "time" : {
        "start" : 1624410679320,
        "stop" : 1624410689986,
        "duration" : 10666
      }
    }, {
      "uid" : "52e1f28b3d25de0c",
      "status" : "passed",
      "time" : {
        "start" : 1624409680735,
        "stop" : 1624409690162,
        "duration" : 9427
      }
    }, {
      "uid" : "3c687c91e851bb48",
      "status" : "passed",
      "time" : {
        "start" : 1624408287384,
        "stop" : 1624408296790,
        "duration" : 9406
      }
    }, {
      "uid" : "23a7cea72ee3a0e6",
      "status" : "passed",
      "time" : {
        "start" : 1624403851883,
        "stop" : 1624403861150,
        "duration" : 9267
      }
    }, {
      "uid" : "9a46d6a0e274f416",
      "status" : "passed",
      "time" : {
        "start" : 1624399108157,
        "stop" : 1624399117702,
        "duration" : 9545
      }
    }, {
      "uid" : "e9e259026f87b745",
      "status" : "passed",
      "time" : {
        "start" : 1624337375958,
        "stop" : 1624337387547,
        "duration" : 11589
      }
    }, {
      "uid" : "609488e3b0ccbe06",
      "status" : "passed",
      "time" : {
        "start" : 1624335402718,
        "stop" : 1624335411314,
        "duration" : 8596
      }
    }, {
      "uid" : "f085686e2190318d",
      "status" : "passed",
      "time" : {
        "start" : 1624251292980,
        "stop" : 1624251305953,
        "duration" : 12973
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "33e7dc7831228a42.json",
  "parameterValues" : [ ]
}