{
  "uid" : "7e048331f8f77758",
  "name" : "WordAds block",
  "fullName" : "WordAds block",
  "historyId" : "18efccdb8f3fb33e445e77a8ef2cffa3",
  "time" : {
    "start" : 1626816834975,
    "stop" : 1626816843283,
    "duration" : 8308
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a WordAds block\",\n    async () => {\n      await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n      blockId = await blockEditor.insertBlock(\n        _wordAds.default.name(),\n        _wordAds.default.title()\n      );\n      await blockEditor.selectPostTitle();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can switch to Wide Skyscraper ad format\",\n    async () => {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that WordAds block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a WordAds block&quot;,\n    async () =&gt; {\n      await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n      blockId = await blockEditor.insertBlock(\n        _wordAds.default.name(),\n        _wordAds.default.title()\n      );\n      await blockEditor.selectPostTitle();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can switch to Wide Skyscraper ad format&quot;,\n    async () =&gt; {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that WordAds block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 9,
        "unknown" : 0,
        "total" : 9
      },
      "items" : [ {
        "uid" : "43d128fe46f380a3",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/43d128fe46f380a3",
        "status" : "passed",
        "time" : {
          "start" : 1626662563576,
          "stop" : 1626662567469,
          "duration" : 3893
        }
      }, {
        "uid" : "155600963b9597d1",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/155600963b9597d1",
        "status" : "passed",
        "time" : {
          "start" : 1626416742375,
          "stop" : 1626416747745,
          "duration" : 5370
        }
      }, {
        "uid" : "3455504c1db313bb",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/3455504c1db313bb",
        "status" : "passed",
        "time" : {
          "start" : 1626327998711,
          "stop" : 1626328003517,
          "duration" : 4806
        }
      }, {
        "uid" : "25ecb53646616189",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/25ecb53646616189",
        "status" : "passed",
        "time" : {
          "start" : 1626309764999,
          "stop" : 1626309769276,
          "duration" : 4277
        }
      }, {
        "uid" : "c7dec1c9f88bc37f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/c7dec1c9f88bc37f",
        "status" : "passed",
        "time" : {
          "start" : 1626162425685,
          "stop" : 1626162431511,
          "duration" : 5826
        }
      }, {
        "uid" : "6f45f61c2db7f1ce",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/6f45f61c2db7f1ce",
        "status" : "passed",
        "time" : {
          "start" : 1626064965626,
          "stop" : 1626064974689,
          "duration" : 9063
        }
      }, {
        "uid" : "7e8a22f9162269a3",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/7e8a22f9162269a3",
        "status" : "passed",
        "time" : {
          "start" : 1626057228466,
          "stop" : 1626057232256,
          "duration" : 3790
        }
      }, {
        "uid" : "5f2ff1f7f5fe4a0e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20318/report/#testresult/5f2ff1f7f5fe4a0e",
        "status" : "passed",
        "time" : {
          "start" : 1625815774050,
          "stop" : 1625815780192,
          "duration" : 6142
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7e048331f8f77758.json",
  "parameterValues" : [ ]
}