{
  "uid" : "598921280a88fa30",
  "name" : "Pinterest block",
  "fullName" : "Pinterest block",
  "historyId" : "bf919c5c1253559f0d007402decf47af",
  "time" : {
    "start" : 1627341148168,
    "stop" : 1627341158325,
    "duration" : 10157
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const pinId = _config.default.get(\"blocks.pinterest.pinId\");\n\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Pinterest block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Pinterest block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Pinterest block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const pinId = _config.default.get(&quot;blocks.pinterest.pinId&quot;);\n\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Pinterest block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _pinterest.default.name(),\n        _pinterest.default.title()\n      );\n      const pinterestBlock = new _pinterest.default(blockId, page, pinId);\n      await pinterestBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Pinterest block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Pinterest block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_pinterest.default, {\n          pinId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "8641e3f6d07d0a40",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/8641e3f6d07d0a40",
        "status" : "passed",
        "time" : {
          "start" : 1627339736680,
          "stop" : 1627339743634,
          "duration" : 6954
        }
      }, {
        "uid" : "77b5acc461b00695",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/77b5acc461b00695",
        "status" : "passed",
        "time" : {
          "start" : 1627337495464,
          "stop" : 1627337502601,
          "duration" : 7137
        }
      }, {
        "uid" : "2f3c4dd1bcd65fde",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/2f3c4dd1bcd65fde",
        "status" : "passed",
        "time" : {
          "start" : 1627335853417,
          "stop" : 1627335860396,
          "duration" : 6979
        }
      }, {
        "uid" : "8a8a64a5de92306c",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/8a8a64a5de92306c",
        "status" : "passed",
        "time" : {
          "start" : 1627294556462,
          "stop" : 1627294564305,
          "duration" : 7843
        }
      }, {
        "uid" : "67b0853310b5c666",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/67b0853310b5c666",
        "status" : "passed",
        "time" : {
          "start" : 1627293147673,
          "stop" : 1627293154896,
          "duration" : 7223
        }
      }, {
        "uid" : "e0b2f94c971a010a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/e0b2f94c971a010a",
        "status" : "passed",
        "time" : {
          "start" : 1627291599668,
          "stop" : 1627291606228,
          "duration" : 6560
        }
      }, {
        "uid" : "924f7c95a6d0b0d9",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/924f7c95a6d0b0d9",
        "status" : "passed",
        "time" : {
          "start" : 1627289940739,
          "stop" : 1627289947616,
          "duration" : 6877
        }
      }, {
        "uid" : "8f6578368e4b15f2",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/8f6578368e4b15f2",
        "status" : "passed",
        "time" : {
          "start" : 1627284783740,
          "stop" : 1627284794690,
          "duration" : 10950
        }
      }, {
        "uid" : "816450e2502f83c8",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/816450e2502f83c8",
        "status" : "passed",
        "time" : {
          "start" : 1627283540495,
          "stop" : 1627283547196,
          "duration" : 6701
        }
      }, {
        "uid" : "13a6e35e0130217d",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/13a6e35e0130217d",
        "status" : "passed",
        "time" : {
          "start" : 1627282093634,
          "stop" : 1627282102285,
          "duration" : 8651
        }
      }, {
        "uid" : "6623495326b5bdd1",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20448/report/#testresult/6623495326b5bdd1",
        "status" : "passed",
        "time" : {
          "start" : 1627280673287,
          "stop" : 1627280678573,
          "duration" : 5286
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "598921280a88fa30.json",
  "parameterValues" : [ ]
}