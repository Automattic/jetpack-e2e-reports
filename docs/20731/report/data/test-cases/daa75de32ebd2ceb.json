{
  "uid" : "daa75de32ebd2ceb",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1629733799736,
    "stop" : 1629733856611,
    "duration" : 56875
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a MailChimp block\", async () => {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\"Connect to MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a MailChimp block&quot;, async () =&gt; {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(&quot;Connect to MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//option[contains(text(), 'e2etesting')]\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1629733794035,
        "stop" : 1629733799733,
        "duration" : 5698
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1629733856658,
        "stop" : 1629733859588,
        "duration" : 2930
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "Visit block editor page",
      "time" : {
        "start" : 1629733864909,
        "stop" : 1629733866853,
        "duration" : 1944
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a MailChimp block\", async () => {\n    blockId = await blockEditor.insertBlock(\n      _mailchimp.default.name(),\n      _mailchimp.default.title()\n    );\n  });\n  await (0, _reporter.testStep)(\"Connect to MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//option[contains(text(), 'e2etesting')]\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ {
      "name" : "Add a MailChimp block",
      "time" : {
        "start" : 1629733799777,
        "stop" : 1629733801298,
        "duration" : 1521
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Search for block: Mailchimp",
        "time" : {
          "start" : 1629733799778,
          "stop" : 1629733800885,
          "duration" : 1107
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Insert block with name: mailchimp",
        "time" : {
          "start" : 1629733800886,
          "stop" : 1629733801265,
          "duration" : 379
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Connect to MailChimp",
      "time" : {
        "start" : 1629733801299,
        "stop" : 1629733847153,
        "duration" : 45854
      },
      "status" : "failed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "b3dcb78b5b34df95",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "b3dcb78b5b34df95.png",
      "type" : "image/png",
      "size" : 42256
    }, {
      "uid" : "6823f1582ef709ec",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "6823f1582ef709ec.png",
      "type" : "image/png",
      "size" : 164774
    }, {
      "uid" : "c1b132104cf292c5",
      "name" : "1629733847955_Paid_blocks___MailChimp_Block.webm",
      "source" : "c1b132104cf292c5.webm",
      "type" : "video/webm",
      "size" : 1030847
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 8,
        "unknown" : 0,
        "total" : 14
      },
      "items" : [ {
        "uid" : "26eae3e8ca15d75d",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/26eae3e8ca15d75d",
        "status" : "broken",
        "statusDetails" : "Error",
        "time" : {
          "start" : 1629732240624,
          "stop" : 1629732378693,
          "duration" : 138069
        }
      }, {
        "uid" : "5dcedc5eab0965dc",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/5dcedc5eab0965dc",
        "status" : "passed",
        "time" : {
          "start" : 1629729183664,
          "stop" : 1629729201986,
          "duration" : 18322
        }
      }, {
        "uid" : "d1cb649a7a7d2d6a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/d1cb649a7a7d2d6a",
        "status" : "broken",
        "statusDetails" : "Error",
        "time" : {
          "start" : 1629492068351,
          "stop" : 1629492081565,
          "duration" : 13214
        }
      }, {
        "uid" : "707ebc2426531306",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/707ebc2426531306",
        "status" : "passed",
        "time" : {
          "start" : 1629484497888,
          "stop" : 1629484513411,
          "duration" : 15523
        }
      }, {
        "uid" : "c5885e46af75d6ea",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/c5885e46af75d6ea",
        "status" : "passed",
        "time" : {
          "start" : 1629483641696,
          "stop" : 1629483658720,
          "duration" : 17024
        }
      }, {
        "uid" : "caa4694516b82846",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/caa4694516b82846",
        "status" : "passed",
        "time" : {
          "start" : 1629477360285,
          "stop" : 1629477374503,
          "duration" : 14218
        }
      }, {
        "uid" : "21da21a66bc55cbf",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/21da21a66bc55cbf",
        "status" : "broken",
        "statusDetails" : "Error",
        "time" : {
          "start" : 1629474388788,
          "stop" : 1629474409589,
          "duration" : 20801
        }
      }, {
        "uid" : "5ff8b032ab467230",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/5ff8b032ab467230",
        "status" : "passed",
        "time" : {
          "start" : 1629409788222,
          "stop" : 1629409805496,
          "duration" : 17274
        }
      }, {
        "uid" : "92aaedc713f99bde",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/92aaedc713f99bde",
        "status" : "broken",
        "statusDetails" : "Error",
        "time" : {
          "start" : 1629404412753,
          "stop" : 1629404549430,
          "duration" : 136677
        }
      }, {
        "uid" : "ea3526654406d94b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/ea3526654406d94b",
        "status" : "broken",
        "statusDetails" : "Error",
        "time" : {
          "start" : 1629389267327,
          "stop" : 1629389408556,
          "duration" : 141229
        }
      }, {
        "uid" : "9a09052f2bdf5dde",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/9a09052f2bdf5dde",
        "status" : "passed",
        "time" : {
          "start" : 1629328373257,
          "stop" : 1629328385738,
          "duration" : 12481
        }
      }, {
        "uid" : "890029344f1d2e3c",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/890029344f1d2e3c",
        "status" : "passed",
        "time" : {
          "start" : 1629317496817,
          "stop" : 1629317511224,
          "duration" : 14407
        }
      }, {
        "uid" : "d9965f8a9243e8d1",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20731/report/#testresult/d9965f8a9243e8d1",
        "status" : "passed",
        "time" : {
          "start" : 1629239751923,
          "stop" : 1629239766641,
          "duration" : 14718
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "daa75de32ebd2ceb.json",
  "parameterValues" : [ ]
}