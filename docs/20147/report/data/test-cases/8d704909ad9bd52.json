{
  "uid" : "8d704909ad9bd52",
  "name" : "Eventbrite block",
  "fullName" : "Eventbrite block",
  "historyId" : "0b4a15ebb314cfb213eb3e305bfce89d",
  "time" : {
    "start" : 1624862770635,
    "stop" : 1624862778161,
    "duration" : 7526
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  const eventId = &quot;112691417062&quot;;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a Eventbrite block&quot;,\n    async () =&gt; {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can publish a post with a Eventbrite block&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    &quot;Can assert that Eventbrite block is rendered&quot;,\n    async () =&gt; {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "415ab6c578c4b79b",
      "name" : "1624862755406_beforeAll___Free_blocks.webm",
      "source" : "415ab6c578c4b79b.webm",
      "type" : "video/webm",
      "size" : 524488
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e9868711b3af9dce",
      "name" : "1624862737739_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "e9868711b3af9dce.webm",
      "type" : "video/webm",
      "size" : 256299
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  const eventId = \"112691417062\";\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a Eventbrite block\",\n    async () => {\n      const blockId = await blockEditor.insertBlock(\n        _eventbrite.default.name(),\n        _eventbrite.default.title()\n      );\n      const eventbriteBlock = new _eventbrite.default(blockId, page, eventId);\n      await eventbriteBlock.addEmbed();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can publish a post with a Eventbrite block\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n    }\n  );\n  await (0, _testSetup.step)(\n    \"Can assert that Eventbrite block is rendered\",\n    async () => {\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_eventbrite.default, {\n          eventId,\n        })\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "56535bca611f25f9",
      "name" : "1624862778072_Free_blocks___Eventbrite_block.webm",
      "source" : "56535bca611f25f9.webm",
      "type" : "video/webm",
      "size" : 325994
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "free-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7fc4483f2465810a",
      "status" : "passed",
      "time" : {
        "start" : 1624526318494,
        "stop" : 1624526331650,
        "duration" : 13156
      }
    }, {
      "uid" : "1459038905891efc",
      "status" : "passed",
      "time" : {
        "start" : 1624524371934,
        "stop" : 1624524384375,
        "duration" : 12441
      }
    }, {
      "uid" : "5df0dc05d6230aae",
      "status" : "passed",
      "time" : {
        "start" : 1624464316016,
        "stop" : 1624464326699,
        "duration" : 10683
      }
    }, {
      "uid" : "7f2b48394570b0ab",
      "status" : "passed",
      "time" : {
        "start" : 1624462502620,
        "stop" : 1624462511350,
        "duration" : 8730
      }
    }, {
      "uid" : "f995e88901a80989",
      "status" : "passed",
      "time" : {
        "start" : 1624460354824,
        "stop" : 1624460365392,
        "duration" : 10568
      }
    }, {
      "uid" : "eb0fce009c39bb62",
      "status" : "passed",
      "time" : {
        "start" : 1624458678146,
        "stop" : 1624458685105,
        "duration" : 6959
      }
    }, {
      "uid" : "6bcba5c076a8b0ed",
      "status" : "passed",
      "time" : {
        "start" : 1624447293005,
        "stop" : 1624447301794,
        "duration" : 8789
      }
    }, {
      "uid" : "700cb91ee9468ef7",
      "status" : "passed",
      "time" : {
        "start" : 1624443566448,
        "stop" : 1624443574889,
        "duration" : 8441
      }
    }, {
      "uid" : "27ee09bb126c425c",
      "status" : "passed",
      "time" : {
        "start" : 1624442365593,
        "stop" : 1624442374248,
        "duration" : 8655
      }
    }, {
      "uid" : "fc64f9014fecbe05",
      "status" : "passed",
      "time" : {
        "start" : 1624439214116,
        "stop" : 1624439223685,
        "duration" : 9569
      }
    } ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "8d704909ad9bd52.json",
  "parameterValues" : [ ]
}