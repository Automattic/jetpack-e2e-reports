{
  "uid" : "cc8d50f0103e1f7e",
  "name" : "MailChimp Block",
  "fullName" : "MailChimp Block",
  "historyId" : "1e0e5667b8c419e68fc1ae6a0d73dd61",
  "time" : {
    "start" : 1624863946909,
    "stop" : 1624864007782,
    "duration" : 60873
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  let blockId;\n  await (0, _testSetup.step)(\n    &quot;Can visit the block editor and add a MailChimp block&quot;,\n    async () =&gt; {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(&quot;Can connect to a MailChimp&quot;, async () =&gt; {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    &quot;Can publish a post and assert that MailChimp block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//span[contains(text(), 'e2etesting')]\" to be visible\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6f94781afc3b5316",
      "name" : "1624863939189_beforeAll___Paid_blocks.webm",
      "source" : "6f94781afc3b5316.webm",
      "type" : "video/webm",
      "size" : 1192936
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9cb06870d34002f3",
      "name" : "1624863896360_beforeAll___ROOT_DESCRIBE_BLOCK.webm",
      "source" : "9cb06870d34002f3.webm",
      "type" : "video/webm",
      "size" : 292363
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  let blockId;\n  await (0, _testSetup.step)(\n    \"Can visit the block editor and add a MailChimp block\",\n    async () => {\n      blockId = await blockEditor.insertBlock(\n        _mailchimp.default.name(),\n        _mailchimp.default.title()\n      );\n    }\n  );\n  await (0, _testSetup.step)(\"Can connect to a MailChimp\", async () => {\n    const mcBlock = new _mailchimp.default(blockId, page);\n    await mcBlock.connect();\n  });\n  await (0, _testSetup.step)(\n    \"Can publish a post and assert that MailChimp block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_mailchimp.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.waitForSelector: Timeout 40000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"//span[contains(text(), 'e2etesting')]\" to be visible\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b3d93228312a535b",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "b3d93228312a535b.png",
      "type" : "image/png",
      "size" : 42063
    }, {
      "uid" : "26ed70a394e0de4d",
      "name" : "Paid blocks - MailChimp Block",
      "source" : "26ed70a394e0de4d.png",
      "type" : "image/png",
      "size" : 165126
    }, {
      "uid" : "6a0f8ee5fe293de0",
      "name" : "1624863997498_Paid_blocks___MailChimp_Block.webm",
      "source" : "6a0f8ee5fe293de0.webm",
      "type" : "video/webm",
      "size" : 1036290
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "664aed78efb755d",
      "status" : "passed",
      "time" : {
        "start" : 1624862695937,
        "stop" : 1624862709994,
        "duration" : 14057
      }
    }, {
      "uid" : "728e61fcee0157d6",
      "status" : "passed",
      "time" : {
        "start" : 1624526214627,
        "stop" : 1624526233090,
        "duration" : 18463
      }
    }, {
      "uid" : "8e2f26767d8e186b",
      "status" : "passed",
      "time" : {
        "start" : 1624524295654,
        "stop" : 1624524311089,
        "duration" : 15435
      }
    }, {
      "uid" : "4d9a2da33e701fc0",
      "status" : "passed",
      "time" : {
        "start" : 1624464228028,
        "stop" : 1624464244745,
        "duration" : 16717
      }
    }, {
      "uid" : "978db130ba81f44a",
      "status" : "passed",
      "time" : {
        "start" : 1624462431925,
        "stop" : 1624462444235,
        "duration" : 12310
      }
    }, {
      "uid" : "29a9d40f5c1fd2fd",
      "status" : "passed",
      "time" : {
        "start" : 1624460278755,
        "stop" : 1624460293670,
        "duration" : 14915
      }
    }, {
      "uid" : "6aa96399e2ae3347",
      "status" : "passed",
      "time" : {
        "start" : 1624458606523,
        "stop" : 1624458620279,
        "duration" : 13756
      }
    }, {
      "uid" : "33fa8160041bffe7",
      "status" : "passed",
      "time" : {
        "start" : 1624447209413,
        "stop" : 1624447225898,
        "duration" : 16485
      }
    }, {
      "uid" : "e361b78e4bbe717b",
      "status" : "passed",
      "time" : {
        "start" : 1624443491531,
        "stop" : 1624443504802,
        "duration" : 13271
      }
    }, {
      "uid" : "ded554f86fe61e3f",
      "status" : "passed",
      "time" : {
        "start" : 1624442282417,
        "stop" : 1624442299251,
        "duration" : 16834
      }
    }, {
      "uid" : "ff128e2bd7d05005",
      "status" : "passed",
      "time" : {
        "start" : 1624439141827,
        "stop" : 1624439155447,
        "duration" : 13620
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "cc8d50f0103e1f7e.json",
  "parameterValues" : [ ]
}