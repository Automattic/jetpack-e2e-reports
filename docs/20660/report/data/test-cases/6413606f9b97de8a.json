{
  "uid" : "6413606f9b97de8a",
  "name" : "WordAds block",
  "fullName" : "WordAds block",
  "historyId" : "18efccdb8f3fb33e445e77a8ef2cffa3",
  "time" : {
    "start" : 1630049582085,
    "stop" : 1630049582152,
    "duration" : 67
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _prerequisites.prerequisitesBuilder)()\n    .withActiveModules([\"wordads\"])\n    .build();\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a WordAds block\", async () => {\n    await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n    blockId = await blockEditor.insertBlock(\n      _wordAds.default.name(),\n      _wordAds.default.title()\n    );\n    await blockEditor.selectPostTitle();\n  });\n  await (0, _reporter.testStep)(\n    \"Switch to Wide Skyscraper ad format\",\n    async () => {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that WordAds block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  await (0, _prerequisites.prerequisitesBuilder)()\n    .withActiveModules([&quot;wordads&quot;])\n    .build();\n  let blockId;\n  await (0, _reporter.testStep)(&quot;Add a WordAds block&quot;, async () =&gt; {\n    await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n    blockId = await blockEditor.insertBlock(\n      _wordAds.default.name(),\n      _wordAds.default.title()\n    );\n    await blockEditor.selectPostTitle();\n  });\n  await (0, _reporter.testStep)(\n    &quot;Switch to Wide Skyscraper ad format&quot;,\n    async () =&gt; {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Publish a post and assert that WordAds block is rendered&quot;,\n    async () =&gt; {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.click: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"a[href*='my-plan'] span\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.click: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"a[href*='my-plan'] span\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "51f15433a2ace4df",
      "name" : "beforeAll - Paid blocks",
      "source" : "51f15433a2ace4df.png",
      "type" : "image/png",
      "size" : 277545
    }, {
      "uid" : "2d7f1b58a675c069",
      "name" : "1630049577132_beforeAll___Paid_blocks.webm",
      "source" : "2d7f1b58a675c069.webm",
      "type" : "video/webm",
      "size" : 1278830
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _prerequisites.prerequisitesBuilder)()\n    .withActiveModules([\"wordads\"])\n    .build();\n  let blockId;\n  await (0, _reporter.testStep)(\"Add a WordAds block\", async () => {\n    await blockEditor.waitForAvailableBlock(_wordAds.default.name());\n    blockId = await blockEditor.insertBlock(\n      _wordAds.default.name(),\n      _wordAds.default.title()\n    );\n    await blockEditor.selectPostTitle();\n  });\n  await (0, _reporter.testStep)(\n    \"Switch to Wide Skyscraper ad format\",\n    async () => {\n      const adBlock = new _wordAds.default(blockId, page);\n      await adBlock.focus();\n      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Publish a post and assert that WordAds block is rendered\",\n    async () => {\n      await blockEditor.selectPostTitle();\n      await blockEditor.publishPost();\n      await blockEditor.viewPost();\n      const frontend = await _postFrontend.default.init(page);\n\n      expect(\n        await frontend.isRenderedBlockPresent(_wordAds.default)\n      ).toBeTruthy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.click: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"a[href*='my-plan'] span\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9764069ce73ab2ec",
      "name" : "1630049582121_Paid_blocks___WordAds_block.webm",
      "source" : "9764069ce73ab2ec.webm",
      "type" : "video/webm",
      "size" : 1409
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "pro-blocks.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 10,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "746e1933fad2ca6a",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/746e1933fad2ca6a",
        "status" : "passed",
        "time" : {
          "start" : 1629995681294,
          "stop" : 1629995695766,
          "duration" : 14472
        }
      }, {
        "uid" : "e75b6f665a828d2b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/e75b6f665a828d2b",
        "status" : "passed",
        "time" : {
          "start" : 1629994175604,
          "stop" : 1629994187051,
          "duration" : 11447
        }
      }, {
        "uid" : "c3bea4756636e3ca",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/c3bea4756636e3ca",
        "status" : "passed",
        "time" : {
          "start" : 1629991683833,
          "stop" : 1629991696076,
          "duration" : 12243
        }
      }, {
        "uid" : "c4dbbf630e713cec",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/c4dbbf630e713cec",
        "status" : "passed",
        "time" : {
          "start" : 1629968705998,
          "stop" : 1629968721106,
          "duration" : 15108
        }
      }, {
        "uid" : "bb8287096fa8f8c5",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/bb8287096fa8f8c5",
        "status" : "passed",
        "time" : {
          "start" : 1629190323155,
          "stop" : 1629190334044,
          "duration" : 10889
        }
      }, {
        "uid" : "eab9cae5d5c38f88",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/eab9cae5d5c38f88",
        "status" : "passed",
        "time" : {
          "start" : 1629184761158,
          "stop" : 1629184773913,
          "duration" : 12755
        }
      }, {
        "uid" : "f6ed50c87f7156e4",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/f6ed50c87f7156e4",
        "status" : "passed",
        "time" : {
          "start" : 1628846743487,
          "stop" : 1628846757567,
          "duration" : 14080
        }
      }, {
        "uid" : "5ad5a111c75a8741",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/5ad5a111c75a8741",
        "status" : "passed",
        "time" : {
          "start" : 1628843251741,
          "stop" : 1628843263940,
          "duration" : 12199
        }
      }, {
        "uid" : "b764a3aece011ca9",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/b764a3aece011ca9",
        "status" : "passed",
        "time" : {
          "start" : 1628842206483,
          "stop" : 1628842224253,
          "duration" : 17770
        }
      }, {
        "uid" : "4801d94b3a2ac88b",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/20660/report/#testresult/4801d94b3a2ac88b",
        "status" : "passed",
        "time" : {
          "start" : 1628759342441,
          "stop" : 1628759356126,
          "duration" : 13685
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6413606f9b97de8a.json",
  "parameterValues" : [ ]
}