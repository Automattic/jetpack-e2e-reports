"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Tue Oct 26 12:08:57 UTC 2021","Tue Oct 26 12:09:05 UTC 2021","8863","specs","","pro-blocks.test.js","","","MailChimp Block","
### Test
```typescript
async () => {
  let blockId;
  await (0, _reporters.testStep)(""Add a MailChimp block"", async () => {
    blockId = await blockEditor.insertBlock(
      _wpAdmin.MailchimpBlock.name(),
      _wpAdmin.MailchimpBlock.title()
    );
  });
  await (0, _reporters.testStep)(""Connect to MailChimp"", async () => {
    const mcBlock = new _wpAdmin.MailchimpBlock(blockId, page);
    await mcBlock.connect();
  });
  await (0, _reporters.testStep)(
    ""Publish a post and assert that MailChimp block is rendered"",
    async () => {
      await blockEditor.selectPostTitle();
      await blockEditor.publishPost();
      await blockEditor.viewPost();
      const frontend = await _pages.PostFrontendPage.init(page);

      expect(
        await frontend.isRenderedBlockPresent(_wpAdmin.MailchimpBlock)
      ).toBeTruthy();
    }
  );
};

```
"
"passed","Tue Oct 26 12:09:43 UTC 2021","Tue Oct 26 12:09:54 UTC 2021","11649","specs","","free-blocks.test.js","","","Eventbrite block","
### Test
```typescript
async () => {
  const eventId = ""112691417062"";
  await (0, _reporters.testStep)(
    ""Can visit the block editor and add a Eventbrite block"",
    async () => {
      const blockId = await blockEditor.insertBlock(
        _wpAdmin.EventbriteBlock.name(),
        _wpAdmin.EventbriteBlock.title()
      );
      const eventbriteBlock = new _wpAdmin.EventbriteBlock(
        blockId,
        page,
        eventId
      );
      await eventbriteBlock.addEmbed();
    }
  );
  await (0, _reporters.testStep)(
    ""Can publish a post with a Eventbrite block"",
    async () => {
      await blockEditor.selectPostTitle();
      await blockEditor.publishPost();
      await blockEditor.viewPost();
    }
  );
  await (0, _reporters.testStep)(
    ""Can assert that Eventbrite block is rendered"",
    async () => {
      const frontend = await _pages.PostFrontendPage.init(page);

      expect(
        await frontend.isRenderedBlockPresent(_wpAdmin.EventbriteBlock, {
          eventId,
        })
      ).toBeTruthy();
    }
  );
};

```
"
"passed","Tue Oct 26 12:09:11 UTC 2021","Tue Oct 26 12:09:20 UTC 2021","9282","specs","","pro-blocks.test.js","","","Pay with PayPal","
### Test
```typescript
async () => {
  let blockId;
  await (0, _reporters.testStep)(""Add a Pay with PayPal block"", async () => {
    blockId = await blockEditor.insertBlock(
      _wpAdmin.SimplePaymentBlock.name(),
      _wpAdmin.SimplePaymentBlock.title()
    );
  });
  await (0, _reporters.testStep)(
    ""Fill details of Pay with PayPal block"",
    async () => {
      const spBlock = new _wpAdmin.SimplePaymentBlock(blockId, page);
      await spBlock.fillDetails();
    }
  );
  await (0, _reporters.testStep)(
    ""Publish a post and assert that Pay with PayPal block is rendered"",
    async () => {
      await blockEditor.setTitle(""Pay with PayPal block"");
      await blockEditor.publishPost();
      await blockEditor.viewPost();
      const frontend = await _pages.PostFrontendPage.init(page);

      expect(
        await frontend.isRenderedBlockPresent(_wpAdmin.SimplePaymentBlock)
      ).toBeTruthy();
    }
  );
};

```
"
"passed","Tue Oct 26 12:09:30 UTC 2021","Tue Oct 26 12:09:39 UTC 2021","8865","specs","","free-blocks.test.js","","","Pinterest block","
### Test
```typescript
async () => {
  const pinId = _config.default.get(""blocks.pinterest.pinId"");

  await (0, _reporters.testStep)(""Add a Pinterest block"", async () => {
    const blockId = await blockEditor.insertBlock(
      _wpAdmin.PinterestBlock.name(),
      _wpAdmin.PinterestBlock.title()
    );
    const pinterestBlock = new _wpAdmin.PinterestBlock(blockId, page, pinId);
    await pinterestBlock.addEmbed();
  });
  await (0, _reporters.testStep)(
    ""Publish a post with a Pinterest block"",
    async () => {
      await blockEditor.selectPostTitle();
      await blockEditor.publishPost();
      await blockEditor.viewPost();
    }
  );
  await (0, _reporters.testStep)(
    ""Can assert that Pinterest block is rendered"",
    async () => {
      const frontend = await _pages.PostFrontendPage.init(page);

      expect(
        await frontend.isRenderedBlockPresent(_wpAdmin.PinterestBlock, {
          pinId,
        })
      ).toBeTruthy();
    }
  );
};

```
"
"skipped","Tue Oct 26 12:09:20 UTC 2021","Tue Oct 26 12:09:20 UTC 2021","32","specs","","pro-blocks.test.js","","","WordAds block","
### Test
```typescript
async () => {
  await (0, _env.prerequisitesBuilder)().withActiveModules([""wordads""]).build();
  let blockId;
  await (0, _reporters.testStep)(""Add a WordAds block"", async () => {
    await blockEditor.waitForAvailableBlock(_wpAdmin.WordAdsBlock.name());
    blockId = await blockEditor.insertBlock(
      _wpAdmin.WordAdsBlock.name(),
      _wpAdmin.WordAdsBlock.title()
    );
    await blockEditor.selectPostTitle();
  });
  await (0, _reporters.testStep)(
    ""Switch to Wide Skyscraper ad format"",
    async () => {
      const adBlock = new _wpAdmin.WordAdsBlock(blockId, page);
      await adBlock.focus();
      await adBlock.switchFormat(4); // switch to Wide Skyscraper ad format
    }
  );
  await (0, _reporters.testStep)(
    ""Publish a post and assert that WordAds block is rendered"",
    async () => {
      await blockEditor.selectPostTitle();
      await blockEditor.publishPost();
      await blockEditor.viewPost();
      const frontend = await _pages.PostFrontendPage.init(page);

      expect(
        await frontend.isRenderedBlockPresent(_wpAdmin.WordAdsBlock)
      ).toBeTruthy();
    }
  );
};

```
"
