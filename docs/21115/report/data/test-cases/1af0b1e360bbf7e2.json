{
  "uid" : "1af0b1e360bbf7e2",
  "name" : "Can perform search with default settings",
  "fullName" : "Can perform search with default settings",
  "historyId" : "8a48effa07b2a0dc8118fcc35772e118",
  "time" : {
    "start" : 1632410143825,
    "stop" : 1632410143948,
    "duration" : 123
  },
  "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _reporter.testStep)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _reporter.testStep)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _reporter.testStep)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _reporter.testStep)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _reporter.testStep)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">async () =&gt; {\n  await (0, _reporter.testStep)(\n    &quot;Can open the overlay by entering a query&quot;,\n    async () =&gt; {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Can show search controls in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Can show search results in the overlay&quot;,\n    async () =&gt; {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    &quot;Can sort results by relevance by default&quot;,\n    async () =&gt; {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        &quot;&lt;mark&gt;Test1&lt;/mark&gt; Record 1&quot;\n      );\n    }\n  );\n  await (0, _reporter.testStep)(&quot;Can edit query in search form&quot;, async () =&gt; {\n    await homepage.enterQueryToOverlay(&quot;test2&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 1&quot;\n    );\n  });\n  await (0, _reporter.testStep)(&quot;Can change sort order&quot;, async () =&gt; {\n    await homepage.chooseSortingLink(&quot;newest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;newest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n    await homepage.chooseSortingLink(&quot;oldest&quot;);\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(&quot;oldest&quot;)).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n  });\n  await (0, _reporter.testStep)(&quot;Can apply filters&quot;, async () =&gt; {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 2&quot;\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      &quot;&lt;mark&gt;Test2&lt;/mark&gt; Record 3&quot;\n    );\n  });\n  await (0, _reporter.testStep)(\n    &quot;Can close overlay by clicking the cross&quot;,\n    async () =&gt; {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError",
  "statusTrace" : "page.goto: Timeout 30000ms exceeded.\n=========================== logs ===========================\nnavigating to \"https://modern-stingray-92.a8c-localtunnel.cyou/wp-admin\", waiting until \"domcontentloaded\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.goto: Timeout 30000ms exceeded.\n=========================== logs ===========================\nnavigating to \"https://modern-stingray-92.a8c-localtunnel.cyou/wp-admin\", waiting until \"domcontentloaded\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ba88473ffc441a47",
      "name" : "1632410064751_beforeAll___Search.webm",
      "source" : "ba88473ffc441a47.webm",
      "type" : "video/webm",
      "size" : 1787516
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\nasync () => {\n  await (0, _reporter.testStep)(\n    \"Can open the overlay by entering a query\",\n    async () => {\n      await homepage.focusSearchInput();\n      await homepage.enterQuery();\n      await homepage.waitForSearchResponse();\n\n      expect(await homepage.isOverlayVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can show search controls in the overlay\",\n    async () => {\n      expect(await homepage.isSearchFormVisible()).toBeTruthy();\n      expect(await homepage.isSortingVisible()).toBeTruthy();\n      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can show search results in the overlay\",\n    async () => {\n      expect(await homepage.isSearchResultVisible()).toBeTruthy();\n    }\n  );\n  await (0, _reporter.testStep)(\n    \"Can sort results by relevance by default\",\n    async () => {\n      expect(await homepage.getFirstResultTitle()).toBe(\n        \"<mark>Test1</mark> Record 1\"\n      );\n    }\n  );\n  await (0, _reporter.testStep)(\"Can edit query in search form\", async () => {\n    await homepage.enterQueryToOverlay(\"test2\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 1\"\n    );\n  });\n  await (0, _reporter.testStep)(\"Can change sort order\", async () => {\n    await homepage.chooseSortingLink(\"newest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"newest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n    await homepage.chooseSortingLink(\"oldest\");\n    await homepage.waitForSearchResponse();\n    expect(await homepage.isSortingLinkSelected(\"oldest\")).toBeTruthy();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n  });\n  await (0, _reporter.testStep)(\"Can apply filters\", async () => {\n    await homepage.clickFilterCategory2();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 2\"\n    );\n    await homepage.clickFilterCategory2();\n    await homepage.clickFilterTag3();\n    await homepage.waitForSearchResponse();\n    expect(await homepage.getFirstResultTitle()).toBe(\n      \"<mark>Test2</mark> Record 3\"\n    );\n  });\n  await (0, _reporter.testStep)(\n    \"Can close overlay by clicking the cross\",\n    async () => {\n      await homepage.clickCrossToCloseOverlay();\n      expect(await homepage.isOverlayVisible()).toBeFalsy();\n    }\n  );\n};\n\n```\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError",
    "statusTrace" : "page.goto: Timeout 30000ms exceeded.\n=========================== logs ===========================\nnavigating to \"https://modern-stingray-92.a8c-localtunnel.cyou/wp-admin\", waiting until \"domcontentloaded\"\n============================================================\nNote: use DEBUG=pw:api environment variable to capture Playwright logs.",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6a20a6e63473745e",
      "name" : "1632410143924_Search___Can_perform_search_with_default_settings.webm",
      "source" : "6a20a6e63473745e.webm",
      "type" : "video/webm",
      "size" : 1409
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "broken",
    "statusMessage" : "Error. Expand for more details.",
    "statusTrace" : "Exceeded timeout of 300000 ms for a hook.\nUse jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "specs"
  }, {
    "name" : "package",
    "value" : "specs"
  }, {
    "name" : "subSuite",
    "value" : "search.test.js"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 9,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "d48efa44a2ff5bec",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/d48efa44a2ff5bec",
        "status" : "broken",
        "statusDetails" : "TimeoutError",
        "time" : {
          "start" : 1632325946033,
          "stop" : 1632325946202,
          "duration" : 169
        }
      }, {
        "uid" : "e43252403c686176",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/e43252403c686176",
        "status" : "passed",
        "time" : {
          "start" : 1632308906365,
          "stop" : 1632308912320,
          "duration" : 5955
        }
      }, {
        "uid" : "bc7a2181236d1781",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/bc7a2181236d1781",
        "status" : "passed",
        "time" : {
          "start" : 1632242067196,
          "stop" : 1632242071738,
          "duration" : 4542
        }
      }, {
        "uid" : "f9edd825dc309ce0",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/f9edd825dc309ce0",
        "status" : "passed",
        "time" : {
          "start" : 1632233305754,
          "stop" : 1632233310140,
          "duration" : 4386
        }
      }, {
        "uid" : "f920f999580d453f",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/f920f999580d453f",
        "status" : "passed",
        "time" : {
          "start" : 1632152774593,
          "stop" : 1632152779926,
          "duration" : 5333
        }
      }, {
        "uid" : "333a933a71029806",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/333a933a71029806",
        "status" : "passed",
        "time" : {
          "start" : 1632150439629,
          "stop" : 1632150443087,
          "duration" : 3458
        }
      }, {
        "uid" : "4898d79cdae4f40e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/4898d79cdae4f40e",
        "status" : "passed",
        "time" : {
          "start" : 1632137113953,
          "stop" : 1632137118146,
          "duration" : 4193
        }
      }, {
        "uid" : "9fcacbaf29e89f32",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/9fcacbaf29e89f32",
        "status" : "broken",
        "statusDetails" : "TypeError",
        "time" : {
          "start" : 1631879434044,
          "stop" : 1631879434180,
          "duration" : 136
        }
      }, {
        "uid" : "6dd0ad65e845345e",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/6dd0ad65e845345e",
        "status" : "passed",
        "time" : {
          "start" : 1631878406835,
          "stop" : 1631878410194,
          "duration" : 3359
        }
      }, {
        "uid" : "d1d2812e6fa437ec",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/d1d2812e6fa437ec",
        "status" : "passed",
        "time" : {
          "start" : 1631808777960,
          "stop" : 1631808781570,
          "duration" : 3610
        }
      }, {
        "uid" : "c68563ac83183bd1",
        "reportUrl" : "https://automattic.github.io/jetpack-e2e-reports/21115/report/#testresult/c68563ac83183bd1",
        "status" : "passed",
        "time" : {
          "start" : 1631807169723,
          "stop" : 1631807173993,
          "duration" : 4270
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1af0b1e360bbf7e2.json",
  "parameterValues" : [ ]
}