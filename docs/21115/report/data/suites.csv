"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"broken","Thu Sep 23 15:18:47 UTC 2021","Thu Sep 23 15:18:47 UTC 2021","30","specs","","pre-connection.test.js","","","Can find connect button on Jetpack page","
### Test
```typescript
async () => {
  await (await _sidebar.default.init(page)).selectJetpack();
  const jetpackPage = await _jetpack.default.init(page);

  expect(await jetpackPage.isConnectScreenVisible()).toBeTruthy();
};

```
"
"broken","Thu Sep 23 15:14:36 UTC 2021","Thu Sep 23 15:16:27 UTC 2021","111286","specs","","connection.test.js","","","User-less","
### Test
```typescript
async () => {
  await (0, _reporter.testStep)(""Can clean up WPCOM cookie"", async () => {
    await (
      await _sidebar.default.init(page)
    ).removeCookieByName(""wordpress_logged_in"");
  });
  await (0, _reporter.testStep)(""Can start Site Level connection"", async () => {
    await (0, _jetpackConnect.doSiteLevelConnection)();
  });
  await (0, _reporter.testStep)(
    ""Can assert that site is connected"",
    async () => {
      const jetpackPage = await _jetpack.default.init(page);

      expect(await jetpackPage.isConnected()).toBeTruthy();
    }
  );
};

```
"
"broken","Thu Sep 23 15:18:47 UTC 2021","Thu Sep 23 15:18:47 UTC 2021","27","specs","","pre-connection.test.js","","","Can find connect button on dashboard page","
### Test
```typescript
async () => {
  await (await _sidebar.default.init(page)).selectDashboard();
  const dashboard = await _dashboard.default.init(page);

  expect(await dashboard.isConnectBannerVisible()).toBeTruthy();
};

```
"
"skipped","Thu Sep 23 15:06:36 UTC 2021","Thu Sep 23 15:06:36 UTC 2021","72","specs","","plugin-updater.test.js","","","Plugin updater","
### Test
```typescript
async () => {
  await (0, _reporter.testStep)(
    ""Can login and navigate to Plugins page"",
    async () => {
      await (await _sidebar.default.init(page)).selectInstalledPlugins();
      await _plugins.default.init(page);
    }
  );
  await (0, _reporter.testStep)(""Can update Jetpack"", async () => {
    const pluginsPage = await _plugins.default.init(page); // const versionBefore = await pluginsPage.getJetpackVersion();

    await pluginsPage.updateJetpack(); // const versionAfter = await pluginsPage.getJetpackVersion();
    //
    expect(versionBefore).not.toBe(versionAfter);
  });
  await (0, _reporter.testStep)(""Can connect Jetpack"", async () => {
    await (await _sidebar.default.init(page)).selectJetpack();
    await (0, _jetpackConnect.doClassicConnection)();
    const jetpackPage = await _jetpack.default.init(page);
    expect(await jetpackPage.isConnected()).toBeTruthy();
  });
};

```
"
"broken","Thu Sep 23 15:18:46 UTC 2021","Thu Sep 23 15:18:47 UTC 2021","128","specs","","pre-connection.test.js","","","Can find connect button on plugins page","
### Test
```typescript
async () => {
  await (await _sidebar.default.init(page)).selectInstalledPlugins();
  const pluginsPage = await _plugins.default.init(page);
  await (0, _utilsHelper.execWpCommand)(
    ""transient set activated_jetpack true 120""
  );
  await pluginsPage.reload();

  expect(await pluginsPage.isFullScreenPopupShown()).toBeTruthy();
};

```
"
"broken","Thu Sep 23 15:15:43 UTC 2021","Thu Sep 23 15:15:44 UTC 2021","25","specs","","search.test.js","","","Can open and close overlay","
### Test
```typescript
async () => {
  await (0, _reporter.testStep)(
    ""Can press enter to to open overlay"",
    async () => {
      await homepage.pressEnterInSearchInput();
      await homepage.waitForSearchResponse();

      expect(await homepage.isOverlayVisible()).toBeTruthy();
    }
  );
  await (0, _reporter.testStep)(
    ""Can click the cross to close the overlay"",
    async () => {
      await homepage.clickCrossToCloseOverlay();
      expect(await homepage.isOverlayVisible()).toBeFalsy();
    }
  );
};

```
"
"broken","Thu Sep 23 15:15:43 UTC 2021","Thu Sep 23 15:15:43 UTC 2021","123","specs","","search.test.js","","","Can perform search with default settings","
### Test
```typescript
async () => {
  await (0, _reporter.testStep)(
    ""Can open the overlay by entering a query"",
    async () => {
      await homepage.focusSearchInput();
      await homepage.enterQuery();
      await homepage.waitForSearchResponse();

      expect(await homepage.isOverlayVisible()).toBeTruthy();
    }
  );
  await (0, _reporter.testStep)(
    ""Can show search controls in the overlay"",
    async () => {
      expect(await homepage.isSearchFormVisible()).toBeTruthy();
      expect(await homepage.isSortingVisible()).toBeTruthy();
      expect(await homepage.isFilteringOptionsVisible()).toBeTruthy();
    }
  );
  await (0, _reporter.testStep)(
    ""Can show search results in the overlay"",
    async () => {
      expect(await homepage.isSearchResultVisible()).toBeTruthy();
    }
  );
  await (0, _reporter.testStep)(
    ""Can sort results by relevance by default"",
    async () => {
      expect(await homepage.getFirstResultTitle()).toBe(
        ""<mark>Test1</mark> Record 1""
      );
    }
  );
  await (0, _reporter.testStep)(""Can edit query in search form"", async () => {
    await homepage.enterQueryToOverlay(""test2"");
    await homepage.waitForSearchResponse();
    expect(await homepage.getFirstResultTitle()).toBe(
      ""<mark>Test2</mark> Record 1""
    );
  });
  await (0, _reporter.testStep)(""Can change sort order"", async () => {
    await homepage.chooseSortingLink(""newest"");
    await homepage.waitForSearchResponse();
    expect(await homepage.isSortingLinkSelected(""newest"")).toBeTruthy();
    expect(await homepage.getFirstResultTitle()).toBe(
      ""<mark>Test2</mark> Record 3""
    );
    await homepage.chooseSortingLink(""oldest"");
    await homepage.waitForSearchResponse();
    expect(await homepage.isSortingLinkSelected(""oldest"")).toBeTruthy();
    expect(await homepage.getFirstResultTitle()).toBe(
      ""<mark>Test2</mark> Record 2""
    );
  });
  await (0, _reporter.testStep)(""Can apply filters"", async () => {
    await homepage.clickFilterCategory2();
    await homepage.waitForSearchResponse();
    expect(await homepage.getFirstResultTitle()).toBe(
      ""<mark>Test2</mark> Record 2""
    );
    await homepage.clickFilterCategory2();
    await homepage.clickFilterTag3();
    await homepage.waitForSearchResponse();
    expect(await homepage.getFirstResultTitle()).toBe(
      ""<mark>Test2</mark> Record 3""
    );
  });
  await (0, _reporter.testStep)(
    ""Can close overlay by clicking the cross"",
    async () => {
      await homepage.clickCrossToCloseOverlay();
      expect(await homepage.isOverlayVisible()).toBeFalsy();
    }
  );
};

```
"
"broken","Thu Sep 23 15:15:44 UTC 2021","Thu Sep 23 15:15:44 UTC 2021","77","specs","","search.test.js","","","Can display different result formats","
### Test
```typescript
async () => {
  await (0, _reporter.testStep)(""Can use minimal format"", async () => {
    await homepage.goto(`${siteUrl}?result_format=minimal`);
    await homepage.waitForPage();
    await homepage.waitForNetworkIdle();
    await homepage.focusSearchInput();
    await homepage.enterQuery(""random-string-1"");
    await homepage.waitForSearchResponse();

    expect(await homepage.isOverlayVisible()).toBeTruthy();
    expect(await homepage.isResultFormat(""is-format-minimal"")).toBeTruthy();
  });
  await (0, _reporter.testStep)(""Can use product format"", async () => {
    await homepage.goto(`${siteUrl}?result_format=product`);
    await homepage.waitForPage();
    await homepage.waitForNetworkIdle();
    await homepage.focusSearchInput();
    await homepage.enterQuery(""random-string-2"");
    await homepage.waitForSearchResponse();
    expect(await homepage.isOverlayVisible()).toBeTruthy();
    expect(await homepage.isResultFormat(""is-format-product"")).toBeTruthy();
    expect(await homepage.isProductImageVisible()).toBeTruthy();
    expect(await homepage.isProductPriceVisible()).toBeTruthy();
  });
  await (0, _reporter.testStep)(""Can use expanded format"", async () => {
    await homepage.goto(`${siteUrl}?result_format=expanded&s=random-string-3`);
    await homepage.waitForPage();
    await homepage.waitForNetworkIdle();
    expect(await homepage.isOverlayVisible()).toBeTruthy();
    expect(await homepage.isResultFormat(""is-format-expanded"")).toBeTruthy();
    expect(await homepage.isExpandedImageVisible()).toBeTruthy();
  });
};

```
"
